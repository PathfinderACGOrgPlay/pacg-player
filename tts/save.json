{
    "SaveName": "Pathfinder Adventure Card Game",
    "GameMode": "Pathfinder Adventure Card Game",
    "Date": "6/3/2020 6:44:32 PM",
    "Gravity": 0.5,
    "PlayArea": 0.5,
    "GameType": "",
    "GameComplexity": "",
    "Tags": [],
    "Table": "Table_None",
    "Sky": "Sky_Museum",
    "Note": "",
    "Rules": "",
    "Grid": {
        "Type": 0,
        "Lines": false,
        "Color": {
            "r": 0,
            "g": 0,
            "b": 0
        },
        "Opacity": 0.75,
        "ThickLines": false,
        "Snapping": false,
        "Offset": false,
        "BothSnapping": false,
        "xSize": 2,
        "ySize": 2,
        "PosOffset": {
            "x": 0,
            "y": 1,
            "z": 0
        }
    },
    "Lighting": {
        "LightIntensity": 0.54,
        "LightColor": {
            "r": 1,
            "g": 0.9804,
            "b": 0.8902
        },
        "AmbientIntensity": 1.3,
        "AmbientType": 0,
        "AmbientSkyColor": {
            "r": 0.5,
            "g": 0.5,
            "b": 0.5
        },
        "AmbientEquatorColor": {
            "r": 0.5,
            "g": 0.5,
            "b": 0.5
        },
        "AmbientGroundColor": {
            "r": 0.5,
            "g": 0.5,
            "b": 0.5
        },
        "ReflectionIntensity": 1,
        "LutIndex": 0,
        "LutContribution": 1
    },
    "Hands": {
        "Enable": true,
        "DisableUnused": false,
        "Hiding": 0,
        "HandTransforms": [
            {
                "Color": "White",
                "Transform": {
                    "posX": 0,
                    "posY": 5,
                    "posZ": -55.74997,
                    "rotX": 0,
                    "rotY": 0,
                    "rotZ": 0,
                    "scaleX": 11.8350019,
                    "scaleY": 7.002465,
                    "scaleZ": 4.04115963
                }
            },
            {
                "Color": "Red",
                "Transform": {
                    "posX": -55.75,
                    "posY": 5,
                    "posZ": 0,
                    "rotX": 0,
                    "rotY": 90,
                    "rotZ": 0,
                    "scaleX": 11.7386026,
                    "scaleY": 7,
                    "scaleZ": 4.0797596
                }
            },
            {
                "Color": "Green",
                "Transform": {
                    "posX": 0,
                    "posY": 5,
                    "posZ": 55.74997,
                    "rotX": 0,
                    "rotY": 180,
                    "rotZ": 0,
                    "scaleX": 11.8350019,
                    "scaleY": 7,
                    "scaleZ": 4.041209
                }
            },
            {
                "Color": "Blue",
                "Transform": {
                    "posX": 55.75,
                    "posY": 5,
                    "posZ": 0,
                    "rotX": 0,
                    "rotY": 270,
                    "rotZ": 0,
                    "scaleX": 11.7383814,
                    "scaleY": 7,
                    "scaleZ": 4.079687
                }
            }
        ]
    },
    "Turns": {
        "Enable": false,
        "Type": 0,
        "TurnOrder": [],
        "Reverse": false,
        "SkipEmpty": false,
        "DisableInteractions": false,
        "PassTurns": true,
        "TurnColor": ""
    },
    "TabStates": {
        "0": {
            "title": "Rules",
            "body": "",
            "color": "Grey",
            "visibleColor": {
                "r": 0.5,
                "g": 0.5,
                "b": 0.5
            },
            "id": 0
        },
        "1": {
            "title": "White",
            "body": "",
            "color": "White",
            "visibleColor": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "id": 1
        },
        "2": {
            "title": "Brown",
            "body": "",
            "color": "Brown",
            "visibleColor": {
                "r": 0.443,
                "g": 0.231,
                "b": 0.09
            },
            "id": 2
        },
        "3": {
            "title": "Red",
            "body": "",
            "color": "Red",
            "visibleColor": {
                "r": 0.856,
                "g": 0.1,
                "b": 0.094
            },
            "id": 3
        },
        "4": {
            "title": "Orange",
            "body": "",
            "color": "Orange",
            "visibleColor": {
                "r": 0.956,
                "g": 0.392,
                "b": 0.113
            },
            "id": 4
        },
        "5": {
            "title": "Yellow",
            "body": "",
            "color": "Yellow",
            "visibleColor": {
                "r": 0.905,
                "g": 0.898,
                "b": 0.172
            },
            "id": 5
        },
        "6": {
            "title": "Green",
            "body": "",
            "color": "Green",
            "visibleColor": {
                "r": 0.192,
                "g": 0.701,
                "b": 0.168
            },
            "id": 6
        },
        "7": {
            "title": "Blue",
            "body": "",
            "color": "Blue",
            "visibleColor": {
                "r": 0.118,
                "g": 0.53,
                "b": 1
            },
            "id": 7
        },
        "8": {
            "title": "Teal",
            "body": "",
            "color": "Teal",
            "visibleColor": {
                "r": 0.129,
                "g": 0.694,
                "b": 0.607
            },
            "id": 8
        },
        "9": {
            "title": "Purple",
            "body": "",
            "color": "Purple",
            "visibleColor": {
                "r": 0.627,
                "g": 0.125,
                "b": 0.941
            },
            "id": 9
        },
        "10": {
            "title": "Pink",
            "body": "",
            "color": "Pink",
            "visibleColor": {
                "r": 0.96,
                "g": 0.439,
                "b": 0.807
            },
            "id": 10
        },
        "11": {
            "title": "Black",
            "body": "",
            "color": "Black",
            "visibleColor": {
                "r": 0.25,
                "g": 0.25,
                "b": 0.25
            },
            "id": 11
        }
    },
    "DecalPallet": [],
    "ObjectStates": [
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": -36,
                "posY": -9,
                "posZ": -36,
                "rotX": 6.536436e-7,
                "rotY": -0.0000239176334,
                "rotZ": -0.00000384849864,
                "scaleX": 1,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978795929/723C50F43FAB3DE3DC12CB8460536E8CB34B60A3/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 2,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "afc863"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": -36,
                "posY": -9,
                "posZ": 36,
                "rotX": 6.536436e-7,
                "rotY": 90,
                "rotZ": -0.00000384849864,
                "scaleX": 1,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978795929/723C50F43FAB3DE3DC12CB8460536E8CB34B60A3/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 2,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "c8edca"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": 36,
                "posY": -9,
                "posZ": 36,
                "rotX": 6.536436e-7,
                "rotY": 180,
                "rotZ": -0.00000384849864,
                "scaleX": 1,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978795929/723C50F43FAB3DE3DC12CB8460536E8CB34B60A3/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 2,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "393bf7"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": 36,
                "posY": -9,
                "posZ": -36,
                "rotX": 6.536436e-7,
                "rotY": 270,
                "rotZ": -0.00000384849864,
                "scaleX": 1,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978795929/723C50F43FAB3DE3DC12CB8460536E8CB34B60A3/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 2,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "12c65e"
        },
        {
            "Name": "Chinese_Checkers_Piece",
            "Transform": {
                "posX": 55.1600037,
                "posY": -0.259998322,
                "posZ": -58.1200027,
                "rotX": 0.00190076465,
                "rotY": 180,
                "rotZ": 0.000379891542,
                "scaleX": 1.6499995,
                "scaleY": 1.6499995,
                "scaleZ": 1.6499995
            },
            "Nickname": "Flex Table Control",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": false,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "MaterialIndex": 1,
            "LuaScript": "tableHeightOffset = -9\n\nfunction onSave()\n    saved_data = JSON.encode({tid=tableImageData, cd=checkData})\n    --saved_data = \"\"\n    return saved_data\nend\n\nfunction onload(saved_data)\n    --Loads the tracking for if the game has started yet\n    if saved_data ~= \"\" then\n         local loaded_data = JSON.decode(saved_data)\n         tableImageData = loaded_data.tid\n         checkData = loaded_data.cd\n    else\n        tableImageData = {}\n        checkData = {move=false, scale=false}\n    end\n\n    --Disables interactable status of objects with GUID in list\n    for _, guid in ipairs(ref_noninteractable) do\n        local obj = getObjectFromGUID(guid)\n        if obj then obj.interactable = false end\n    end\n\n    --Establish references to table parts\n    obj_leg1 = getObjectFromGUID(\"afc863\")\n    obj_leg2 = getObjectFromGUID(\"c8edca\")\n    obj_leg3 = getObjectFromGUID(\"393bf7\")\n    obj_leg4 = getObjectFromGUID(\"12c65e\")\n    obj_surface = getObjectFromGUID(\"4ee1f2\")\n    obj_side_top = getObjectFromGUID(\"35b95f\")\n    obj_side_bot = getObjectFromGUID(\"f938a2\")\n    obj_side_lef = getObjectFromGUID(\"9f95fd\")\n    obj_side_rig = getObjectFromGUID(\"5af8f2\")\n\n    controlActive = false\n    createOpenCloseButton()\nend\n\n\n\n--Activation/deactivation of control panel\n\n\n\n--Activated by clicking on\nfunction click_toggleControl(_, color)\n    if permissionCheck(color) then\n        if not controlActive then\n            --Activate control panel\n            controlActive = true\n            self.clearButtons()\n            createOpenCloseButton()\n            createSurfaceInput()\n            createSurfaceButtons()\n            createScaleInput()\n            createScaleButtons()\n        else\n            --Deactivate control panel\n            controlActive = false\n            self.clearButtons()\n            self.clearInputs()\n            createOpenCloseButton()\n\n        end\n    end\nend\n\n\n\n\n--Table surface control\n\n\n\n--Changes table surface\nfunction click_applySurface(_, color)\n    if permissionCheck(color) then\n        updateSurface()\n        broadcastToAll(\"New Table Image Applied\", {0.2,0.9,0.2})\n    end\nend\n\n--Saves table surface\nfunction click_saveSurface(_, color)\n    if permissionCheck(color) then\n        local nickname = self.getInputs()[1].value\n        local url = self.getInputs()[2].value\n        if nickname == \"\" then\n            --No nickname\n            broadcastToAll(\"Please supply a nickname for this save.\", {0.9,0.2,0.2})\n        else\n            --Nickname exists\n\n            if findInImageDataIndex(url, nickname) == nil then\n                --Save doesn't exist already\n                table.insert(tableImageData, {url=url, name=nickname})\n                broadcastToAll(\"Image URL saved to memory.\", {0.2,0.9,0.2})\n                --Refresh buttons\n                self.clearButtons()\n                createOpenCloseButton()\n                createSurfaceButtons()\n                createScaleButtons()\n            else\n                --Save exists already\n                broadcastToAll(\"Memory already contains a save with this Name or URL. Delete it first.\", {0.9,0.2,0.2})\n            end\n        end\n    end\nend\n\n--Loads table surface\nfunction click_loadMemory(_, color, index)\n    if permissionCheck(color) then\n        self.editInput({index=0, value=tableImageData[index].name})\n        self.editInput({index=1, value=tableImageData[index].url})\n        updateSurface()\n        broadcastToAll(\"Table Image Loaded\", {0.2,0.9,0.2})\n    end\nend\n\n--Deletes table surface\nfunction click_deleteMemory(_, color, index)\n    if permissionCheck(color) then\n        table.remove(tableImageData, index)\n        self.clearButtons()\n        createOpenCloseButton()\n        createSurfaceButtons()\n        createScaleButtons()\n        broadcastToAll(\"Element Removed from Memory\", {0.2,0.9,0.2})\n    end\nend\n\n--Updates surface from the values in the input field\nfunction updateSurface()\n    local customInfo = obj_surface.getCustomObject()\n    customInfo.diffuse = self.getInputs()[2].value\n    obj_surface.setCustomObject(customInfo)\n    obj_surface = obj_surface.reload()\nend\n\n\n\n--Table Scale control\n\n\n\n--Applies Scale to table pieces\nfunction click_applyScale(_, color)\n    if permissionCheck(color) then\n        local newWidth = tonumber(self.getInputs()[3].value)\n        local newDepth = tonumber(self.getInputs()[4].value)\n        if type(newWidth) ~= \"number\" then\n            broadcastToAll(\"Invalid Width\", {0.9,0.2,0.2})\n            return\n        elseif type(newDepth) ~= \"number\" then\n            broadcastToAll(\"Invalid Depth\", {0.9,0.2,0.2})\n            return\n        elseif newWidth<0.1 or newDepth<0.1 then\n            broadcastToAll(\"Scale cannot go below 0.1\", {0.9,0.2,0.2})\n            return\n        elseif newWidth>12 or newDepth>12 then\n            broadcastToAll(\"Scale should not go over 12 (world size limitation)\", {0.9,0.2,0.2})\n            return\n        else\n            changeTableScale(math.abs(newWidth), math.abs(newDepth))\n            broadcastToAll(\"Scale applied.\", {0.2,0.9,0.2})\n        end\n    end\nend\n\n--Checks/unchecks move box for hands\nfunction click_checkMove(_, color)\n    if permissionCheck(color) then\n        local find_func = function(o) return o.click_function==\"click_checkMove\" end\n        if checkData.move == true then\n            checkData.move = false\n            local buttonEntry = findButton(self, find_func)\n            self.editButton({index=buttonEntry.index, label=\"\"})\n        else\n            checkData.move = true\n            local buttonEntry = findButton(self, find_func)\n            self.editButton({index=buttonEntry.index, label=string.char(10008)})\n        end\n    end\nend\n\n--Checks/unchecks scale box for hands\n--This button was disabled for technical reasons\n--[[\nfunction click_checkScale(_, color)\n    if permissionCheck(color) then\n        local find_func = function(o) return o.click_function==\"click_checkScale\" end\n        if checkData.scale == true then\n            checkData.scale = false\n            local buttonEntry = findButton(self, find_func)\n            self.editButton({index=buttonEntry.index, label=\"\"})\n        else\n            checkData.scale = true\n            local buttonEntry = findButton(self, find_func)\n            self.editButton({index=buttonEntry.index, label=string.char(10008)})\n        end\n    end\nend\n]]\n\n--Alters scale of elements and moves them\nfunction changeTableScale(width, depth)\n    --Scaling factors used to translate scale to position offset\n    local width2pos = (width-1) * 18\n    local depth2pos = (depth-1) * 18\n\n    --Hand zone movement\n    if checkData.move == true then\n        for _, pc in ipairs(ref_playerColor) do\n            if Player[pc].getHandCount() > 0 then\n                moveHandZone(Player[pc], width2pos, depth2pos)\n            end\n        end\n    end\n    --Hand zone scaling\n    --The button to enable this was disabled for technical reasons\n    if checkData.scale == true then\n        for _, pc in ipairs(ref_playerColor) do\n            if Player[pc].getHandCount() > 0 then\n                scaleHandZone(Player[pc], width, depth)\n            end\n        end\n    end\n\n    --Resizing table elements\n    obj_side_top.setScale({width, 1, 1})\n    obj_side_bot.setScale({width, 1, 1})\n    obj_side_lef.setScale({depth, 1, 1})\n    obj_side_rig.setScale({depth, 1, 1})\n    obj_surface.setScale({width, 1, depth})\n\n    --Moving table elements to accomodate new scale\n    obj_side_lef.setPosition({-width2pos,tableHeightOffset,0})\n    obj_side_rig.setPosition({ width2pos,tableHeightOffset,0})\n    obj_side_top.setPosition({0,tableHeightOffset, depth2pos})\n    obj_side_bot.setPosition({0,tableHeightOffset,-depth2pos})\n    obj_leg1.setPosition({-width2pos,tableHeightOffset,-depth2pos})\n    obj_leg2.setPosition({-width2pos,tableHeightOffset, depth2pos})\n    obj_leg3.setPosition({ width2pos,tableHeightOffset, depth2pos})\n    obj_leg4.setPosition({ width2pos,tableHeightOffset,-depth2pos})\n    self.setPosition(obj_leg4.positionToWorld({-22.12, 8.74,-19.16}))\n    --Only enabled when changing tableHeightOffset\n    --obj_surface.setPosition({0,tableHeightOffset,0})\nend\n\n--Move hand zone, p=player reference, facts are scaling factors\nfunction moveHandZone(p, width2pos, depth2pos)\n    local widthX = obj_side_rig.getPosition().x\n    local depthZ = obj_side_top.getPosition().z\n    for i=1, p.getHandCount() do\n        local handT = p.getHandTransform()\n        local pos = handT.position\n        local y = handT.rotation.y\n\n        if y<45 or y>320 or y>135 and y<225 then\n            if pos.z > 0 then\n                pos.z = pos.z + depth2pos - depthZ\n            else\n                pos.z = pos.z - depth2pos + depthZ\n            end\n        else\n            if pos.x > 0 then\n                pos.x = pos.x + width2pos - widthX\n            else\n                pos.x = pos.x - width2pos + widthX\n            end\n        end\n\n        --Only enabled when changing tableHeightOffset\n        --pos.y = tableHeightOffset + 14\n\n        handT.position = pos\n        p.setHandTransform(handT, i)\n    end\nend\n\n\n---Scales hand zones, p=player reference, facts are scaling factors\nfunction scaleHandZone(p, width, depth)\n    local widthFact = width / obj_side_top.getScale().x\n    local depthFact = depth / obj_side_lef.getScale().x\n    for i=1, p.getHandCount() do\n        local handT = p.getHandTransform()\n        local scale = handT.scale\n        local y = handT.rotation.y\n        if y<45 or y>320 or y>135 and y<225 then\n            scale.x = scale.x * widthFact\n        else\n            scale.x = scale.x * depthFact\n        end\n        handT.scale = scale\n        p.setHandTransform(handT, i)\n    end\nend\n\n\n\n--Information gathering\n\n\n\n--Checks if a color is promoted or host\nfunction permissionCheck(color)\n    if Player[color].host==true or Player[color].promoted==true then\n        return true\n    else\n        return false\n    end\nend\n\n--Locates a string saved within memory file\nfunction findInImageDataIndex(...)\n    for _, str in ipairs({...}) do\n        for i, v in ipairs(tableImageData) do\n            if v.url == str or v.name == str then\n                return i\n            end\n        end\n    end\n    return nil\nend\n\n--Round number (num) to the Nth decimal (dec)\nfunction round(num, dec)\n  local mult = 10^(dec or 0)\n  return math.floor(num * mult + 0.5) / mult\nend\n\n--Locates a button with a helper function\nfunction findButton(obj, func)\n    if func==nil then error(\"No func supplied to findButton\") end\n    for _, v in ipairs(obj.getButtons()) do\n        if func(v) then\n            return v\n        end\n    end\n    return nil\nend\n\n\n\n--Creation of buttons/inputs\n\n\n\nfunction createOpenCloseButton()\n    local tooltip = \"Open Table Control Panel\"\n    if controlActive then\n        tooltip = \"Close Table Control Panel\"\n    end\n    self.createButton({\n        click_function=\"click_toggleControl\", function_owner=self,\n        position={0,0,0}, rotation={-45,0,0}, height=400, width=400,\n        color={1,1,1,0}, tooltip=tooltip\n    })\nend\n\nfunction createSurfaceInput()\n    local currentURL = obj_surface.getCustomObject().diffuse\n    local nickname = \"\"\n    if findInImageDataIndex(currentURL) ~= nil then\n        nickname = tableImageData[findInImageDataIndex(currentURL)].name\n    end\n    self.createInput({\n        label=\"Nickname\", input_function=\"none\", function_owner=self,\n        alignment=3, position={0,0,2}, height=224, width=4000,\n        font_size=200, tooltip=\"Enter nickname for table image (only used for save)\",\n        value=nickname\n    })\n    self.createInput({\n        label=\"URL\", input_function=\"none\", function_owner=self,\n        alignment=3, position={0,0,3}, height=224, width=4000,\n        font_size=200, tooltip=\"Enter URL for tabletop image\",\n        value=currentURL\n    })\nend\n\nfunction createSurfaceButtons()\n    --Label\n    self.createButton({\n        label=\"Tabletop Surface Image\", click_function=\"none\",\n        position={0,0,1}, height=0, width=0, font_size=300, font_color={1,1,1}\n    })\n    --Functional\n    self.createButton({\n        label=\"Apply Image\\nTo Table\", click_function=\"click_applySurface\",\n        function_owner=self, tooltip=\"Apply URL as table image\",\n        position={2,0,4}, height=440, width=1400, font_size=200,\n    })\n    self.createButton({\n        label=\"Save Image\\nTo Memory\", click_function=\"click_saveSurface\",\n        function_owner=self, tooltip=\"Record URL into memory (requires nickname)\",\n        position={-2,0,4}, height=440, width=1400, font_size=200,\n    })\n    --Label\n    self.createButton({\n        label=\"Load From Memory\", click_function=\"none\",\n        position={0,0,5.5}, height=0, width=0, font_size=300, font_color={1,1,1}\n    })\n    --Saves, created dynamically from memory file\n    for i, memoryEntry in ipairs(tableImageData) do\n        --Load\n        local funcName = i..\"loadMemory\"\n        local func = function(x,y) click_loadMemory(x,y,i) end\n        self.setVar(funcName, func)\n        self.createButton({\n            label=memoryEntry.name, click_function=funcName,\n            function_owner=self, tooltip=memoryEntry.url, font_size=200,\n            position={-0.6,0,6.5+0.5*(i-1)}, height=240, width=3300,\n        })\n        --Delete\n        local funcName = i..\"deleteMemory\"\n        local func = function(x,y) click_deleteMemory(x,y,i) end\n        self.setVar(funcName, func)\n        self.createButton({\n            label=\"DELETE\", click_function=funcName,\n            function_owner=self, tooltip=\"\",\n            position={3.6,0,6.5+0.5*(i-1)}, height=240, width=600,\n            font_size=160, font_color={1,0,0}, color={0.8,0.8,0.8}\n        })\n    end\nend\n\nfunction createScaleInput()\n    self.createInput({\n        label=string.char(8644), input_function=\"none\", function_owner=self,\n        alignment=3, position={-8.5,0,2}, height=224, width=400,\n        font_size=200, tooltip=\"Table Width\",\n        value=round(obj_side_top.getScale().x, 1)\n    })\n    self.createInput({\n        label=string.char(8645), input_function=\"none\", function_owner=self,\n        alignment=3, position={-7.5,0,2}, height=224, width=400,\n        font_size=200, tooltip=\"Table Depth\",\n        value=round(obj_side_lef.getScale().x, 1)\n    })\nend\n\nfunction createScaleButtons()\n    --Labels\n    self.createButton({\n        label=\"Table Scale\", click_function=\"none\",\n        position={-8,0,1}, height=0, width=0, font_size=300, font_color={1,1,1}\n    })\n    self.createButton({\n        label=string.char(8644)..\"            \"..string.char(8645),\n        click_function=\"none\",\n        position={-8,0,2}, height=0, width=0, font_size=300, font_color={1,1,1}\n    })\n    self.createButton({\n        label=\"Move Hands:\", click_function=\"none\",\n        position={-8.3,0,3}, height=0, width=0, font_size=200, font_color={1,1,1}\n    })\n    --Disabled due to me removing the feature for technical reasons\n    --[[\n    self.createButton({\n        label=\"Scale Hands:\", click_function=\"none\",\n        position={-8.3,0,4}, height=0, width=0, font_size=200, font_color={1,1,1}\n    })\n    ]]\n    --Checkboxes\n    local label = \"\"\n    if checkData.move == true then label = string.char(10008) end\n    self.createButton({\n        label=label, click_function=\"click_checkMove\",\n        function_owner=self, tooltip=\"Check to move hands when table is rescaled\",\n        position={-6.8,0,3}, height=224, width=224, font_size=200,\n    })\n    --[[\n    local label = \"\"\n    if checkData.scale == true then label = string.char(10008) end\n    self.createButton({\n        label=label, click_function=\"click_checkScale\",\n        function_owner=self, tooltip=\"Check to scale the width of hands when table is rescaled\",\n        position={-6.8,0,4}, height=224, width=224, font_size=200,\n    })\n    ]]\n    --Apply button\n    self.createButton({\n        label=\"Apply Scale\", click_function=\"click_applyScale\",\n        function_owner=self, tooltip=\"Apply width/depth to table\",\n        position={-8,0,4}, height=440, width=1400, font_size=200,\n    })\nend\n\n\n\n\n\n--Data tables\n\n\n\n\nref_noninteractable = {\n    \"afc863\",\"c8edca\",\"393bf7\",\"12c65e\",\"f938a2\",\"9f95fd\",\"35b95f\",\n    \"5af8f2\",\"4ee1f2\",\"bd69bd\"\n}\n\nref_playerColor = {\n    \"White\", \"Brown\", \"Red\", \"Orange\", \"Yellow\",\n    \"Green\", \"Teal\", \"Blue\", \"Purple\", \"Pink\", \"Black\"\n}\n\n--Dummy function, absorbs unwanted triggers\nfunction none() end\n",
            "LuaScriptState": "{\"cd\":{\"move\":true,\"scale\":false},\"tid\":[{\"name\":\"Felt - Green\",\"url\":\"https://i.imgur.com/eHXDjyy.jpg\"},{\"name\":\"Felt - Red\",\"url\":\"https://i.imgur.com/DbPelDi.jpg\"},{\"name\":\"Felt - Grey\",\"url\":\"https://i.imgur.com/N0O6aqj.jpg\"}]}",
            "XmlUI": "",
            "GUID": "bd69bd"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": 0,
                "posY": -9,
                "posZ": -36,
                "rotX": -1.01777751e-13,
                "rotY": 0,
                "rotZ": 0,
                "scaleX": 3,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978796471/14ED0DBD593370733A0309B0950004F33EB9FACA/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 1,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "f938a2"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": -36,
                "posY": -9,
                "posZ": 0,
                "rotX": 0,
                "rotY": 90,
                "rotZ": 0,
                "scaleX": 3,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978796471/14ED0DBD593370733A0309B0950004F33EB9FACA/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 1,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "9f95fd"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": 0,
                "posY": -9,
                "posZ": 36,
                "rotX": -1.01777751e-13,
                "rotY": 180,
                "rotZ": 0,
                "scaleX": 3,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978796471/14ED0DBD593370733A0309B0950004F33EB9FACA/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 1,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "35b95f"
        },
        {
            "Name": "Custom_Assetbundle",
            "Transform": {
                "posX": 36,
                "posY": -9,
                "posZ": 0,
                "rotX": 0,
                "rotY": 270,
                "rotZ": 0,
                "scaleX": 3,
                "scaleY": 1,
                "scaleZ": 1
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomAssetbundle": {
                "AssetbundleURL": "http://cloud-3.steamusercontent.com/ugc/879750610978796471/14ED0DBD593370733A0309B0950004F33EB9FACA/",
                "AssetbundleSecondaryURL": "",
                "MaterialIndex": 1,
                "TypeIndex": 4,
                "LoopingEffectIndex": 0
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "5af8f2"
        },
        {
            "Name": "Custom_Model",
            "Transform": {
                "posX": 0,
                "posY": -9,
                "posZ": 0,
                "rotX": 359.983124,
                "rotY": -0.00189453643,
                "rotZ": 359.920135,
                "scaleX": 3,
                "scaleY": 1,
                "scaleZ": 3
            },
            "Nickname": "",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": true,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomMesh": {
                "MeshURL": "http://cloud-3.steamusercontent.com/ugc/879750610978796176/4A5A65543B98BCFBF57E910D06EC984208223D38/",
                "DiffuseURL": "https://i.imgur.com/eHXDjyy.jpg",
                "NormalURL": "",
                "ColliderURL": "",
                "Convex": true,
                "MaterialIndex": 1,
                "TypeIndex": 4,
                "CustomShader": {
                    "SpecularColor": {
                        "r": 1,
                        "g": 1,
                        "b": 1
                    },
                    "SpecularIntensity": 0,
                    "SpecularSharpness": 2,
                    "FresnelStrength": 0
                },
                "CastShadows": true
            },
            "LuaScript": "",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "4ee1f2"
        },
        {
            "Name": "Custom_Token",
            "Transform": {
                "posX": -4.80039072,
                "posY": 88.98239,
                "posZ": -45.19678,
                "rotX": 0.0168726537,
                "rotY": 179.999451,
                "rotZ": 0.07987695,
                "scaleX": 1.87838769,
                "scaleY": 1,
                "scaleZ": 1.87838769
            },
            "Nickname": "Character Spawner",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomImage": {
                "ImageURL": "http://cloud-3.steamusercontent.com/ugc/872998200457026361/B1498331A1C989A56EABA0DB31EFEC85A441DE57/",
                "ImageSecondaryURL": "",
                "ImageScalar": 1,
                "WidthScale": 0,
                "CustomToken": {
                    "Thickness": 0.1,
                    "MergeDistancePixels": 5,
                    "StandUp": false,
                    "Stackable": false
                }
            },
            "LuaScript": "id = \"\"\r\nloaded = false\r\n\r\nfunction onload()\r\n  self.createInput({\r\n\t\tinput_function = \"updateId\",\r\n\t\tfunction_owner = self,\r\n\t\tlabel = \"Deck\",\r\n\t\ttooltip = \"Deck\",\r\n\t\tposition = {0, 0.1, -1.6},\r\n\t\tscale = {0.5, 0.5, 0.5},\r\n\t\twidth = 3400,\r\n\t\theight = 400,\r\n\t\tfont_size = 300,\r\n\t\tcolodwr = {1,1,1,1},\r\n\t\tfont_color = {0,0,0,1},\r\n\t\tvalidation = 1,\r\n\t\talignment = 1\r\n\t})\r\n\tself.createButton({\r\n\t\tclick_function = \"Go\",\r\n\t\tfunction_owner = self,\r\n\t\tlabel = \"Go\",\r\n\t\tposition = {0, 0.1, -1.1},\r\n\t\tscale = {0.5, 0.5, 0.5},\r\n\t\twidth = 3400,\r\n\t\theight = 400,\r\n\t\tfont_size = 300,\r\n\t\tcolor = {1,1,1,1},\r\n\t\tfont_color = {0,0,0,1},\r\n\t\tvalidation = 1,\r\n\t\talignment = 1\r\n\t})\r\n\tloaded = true\r\nend\r\n\r\nfunction updateId(object, color, value, selected)\r\n  id = value\r\nend\r\n\r\nfunction Go()\r\n  if(running) then\r\n    return\r\n  end\r\n  running = true\r\n  self.setColorTint({1, 0, 0})\r\n\tWebRequest.get(\"https://us-central1-pacg-deckbuilder.cloudfunctions.net/characterList/\" .. id, self, \"SpawnCharacters\")\r\nend\r\n\r\nfunction SpawnCharacters(result)\r\n  if(result.is_done) then\r\n    self.setColorTint({1, 1, 1})\r\n    if(result.is_error) then\r\n      print(\"Error while loading deck: \" .. result.error)\r\n      running = false\r\n    else\r\n      data = JSON.decode(result.text)\r\n      if(data.error) then\r\n        print(\"Error while loading deck: \" .. data.error)\r\n        running = false\r\n      else\r\n        local results = {}\r\n        for v in pairs(data) do\r\n          table.insert(results, {\r\n            Autoraise = true,\r\n            ColorDiffuse = {\r\n              r = 1,\r\n              g = 1,\r\n              b = 1\r\n            },\r\n            CustomMesh = {\r\n              CastShadows = false,\r\n              ColliderURL = \"\",\r\n              Convex = true,\r\n              CustomShader = {\r\n                FresnelStrength = 0,\r\n                SpecularColor = {\r\n                  r = 1,\r\n                  g = 1,\r\n                  b = 1\r\n                },\r\n                SpecularIntensity = 0.05,\r\n                SpecularSharpness = 2\r\n              },\r\n              DiffuseURL = \"\",\r\n              MaterialIndex = 1,\r\n              MeshURL = \"http://pastebin.com/raw.php?i=Jwhwpv7B\",\r\n              NormalURL = \"\",\r\n              TypeIndex = 4\r\n            },\r\n            Description = id,\r\n            GMNotes = \"\",\r\n            Grid = false,\r\n            GridProjection = false,\r\n            Guid = \"deadbf\",\r\n            Hands = false,\r\n            HideWhenFaceDown = false,\r\n            IgnoreFoW = false,\r\n            Locked = false,\r\n            Name = \"Custom_Model\",\r\n            Nickname = v,\r\n            Snap = false,\r\n            Sticky = true,\r\n            Tooltip = false,\r\n            Transform = {\r\n              posX = 1,\r\n              posY = 1,\r\n              posZ = 1,\r\n              rotX = 0,\r\n              rotY = 0,\r\n              rotZ = 0,\r\n              scaleX = 1,\r\n              scaleY = 1,\r\n              scaleZ = 1,\r\n            },\r\n            XmlUI = \"\",\r\n            LuaScript = [========[\r\n----  #include NewestCharacterSheet\ndata = {}\r\ncharacterData = {}\r\nspawnedWindows = {}\r\nbigMesh=\"http://pastebin.com/raw.php?i=Jwhwpv7B\"\r\nsmallMesh=\"https://gist.githubusercontent.com/waterfoul/5aeb5e6db9825639d7b1cd1e24448cab/raw/57e8b5af4dd0627a6d96b456752f695879c5b1e9/model\"\r\n\r\nhr = { tag=\"Image\", attributes={ minHeight=5, minWidth=5, color=\"#AAAAAA\" } }\r\n\r\nisBig = true\r\nfunction Panel(children, attributes)\r\n  return { tag=\"Panel\", attributes=attributes or {}, children=children }\r\nend\r\n\r\nfunction halfWhenBig(big)\r\n  if isBig then\r\n    return big\r\n  end\r\n  return big / 2.75\r\nend\r\n\r\nfunction bigSwitch(big, small)\r\n  if isBig then\r\n    return big\r\n  end\r\n  return small\r\nend\r\n\r\nfunction Text(attributes)\r\n  if(attributes.fontSize == nil) then\r\n    attributes.fontSize=halfWhenBig(30)\r\n  end\r\n  return { tag=\"Text\", attributes=attributes }\r\nend\r\n\r\nfunction Button(attributes)\r\n  attributes = attributes or {}\r\n  if(attributes.fontSize == nil) then\r\n    attributes.fontSize=halfWhenBig(30)\r\n  end\r\n  return { tag=\"Button\", attributes=attributes }\r\nend\r\n\r\nfunction HorizontalLayout(children, attributes)\r\n  return { tag=\"HorizontalLayout\", attributes=attributes or {}, children=children }\r\nend\r\n\r\nfunction VerticalLayout(children, attributes)\r\n  return { tag=\"VerticalLayout\", attributes=attributes or {}, children=children }\r\nend\r\n\r\nfunction ToggleButton(attributes)\r\n  attributes = attributes or {}\r\n  if(attributes.fontSize == nil) then\r\n    attributes.fontSize=halfWhenBig(30)\r\n  end\r\n  return { tag=\"ToggleButton\", attributes=attributes }\r\nend\r\nfunction Pad(width)\r\n  return Text({ minWidth = halfWhenBig(width) })\r\nend\r\n\r\nfunction Checkbox(attributes)\r\n  local size = halfWhenBig(40, 20)\r\n  attributes = attributes or {}\r\n  if(attributes.width == nil) then\r\n    attributes.width = size\r\n  end\r\n  if(attributes.height == nil) then\r\n    attributes.height = size\r\n  end\r\n  return Panel({ ToggleButton(attributes) }, { minWidth=bigSwitch(50, 20), childForceExpandHeight=false })\r\nend\r\n\r\nfunction traits()\r\n  return Text({ text=table.concat(characterData.traits or {}, \", \") })\r\nend\r\n\r\nfunction characterTitle()\r\n  return HorizontalLayout({\r\n    Text({ text=self.getName() }),\r\n    Text({ text=self.getDescription() })\r\n  })\r\nend\r\n\r\nfunction checkboxes(count, prefix, start, pad, handler, id)\r\n  local result = {}\r\n  for i=start,(count + start - 1) do\r\n    table.insert(result, Pad(pad))\r\n    table.insert(result, Checkbox({ onClick=self.getGUID() .. '/' .. handler, id=(i - start + 1) .. '-' .. id}))\r\n    table.insert(result, Pad(pad))\r\n    table.insert(result, Text({ text=(prefix .. i) }))\r\n  end\r\n  return result\r\nend\r\n\r\nfunction concat(t1, t2)\r\n  for i=1,#t2 do\r\n      t1[#t1+1] = t2[i]\r\n  end\r\n  return t1\r\nend\r\n\r\nfunction deckList()\r\n  local children = { Panel({ HorizontalLayout(\r\n    {\r\n      Text({ text=\"Favored Card Type\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n      Text({ text=characterData.cardsList.favoredCardType, alignment=\"MiddleLeft\" })\r\n    }) }, { minHeight=halfWhenBig(50) }), hr }\r\n\r\n  for v in pairs(characterData.cardsList) do\r\n    if(v != \"favoredCardType\" and v != \"special\" and v != \"cohort\") then\r\n      local base = characterData.cardsList[v].base;\r\n      if(base == 0) then\r\n        base = \"-\"\r\n      end\r\n      table.insert(children, Panel({ HorizontalLayout(concat(\r\n        {\r\n          Text({ text=v, minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n          Text({ text=base, minWidth=bigSwitch(50, 20), alignment=\"MiddleLeft\" })\r\n        },\r\n        checkboxes(characterData.cardsList[v].add, \"\", characterData.cardsList[v].base + 1, 20, \"decklistCheck\", v .. \"-deckList\")\r\n      ), { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) }))\r\n      table.insert(children, hr)\r\n    end\r\n  end\r\n\r\n  if(characterData.cardsList.special != nil and characterData.cardsList.special != \"\") then\r\n    table.insert(children, Panel({ HorizontalLayout(\r\n      {\r\n        Text({ text=\"Special\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=characterData.cardsList.special, alignment=\"MiddleLeft\" })\r\n      }) }, { minHeight=halfWhenBig(50) }))\r\n    table.insert(hr)\r\n  end\r\n\r\n  if(characterData.cardsList.cohort != nil and characterData.cardsList.cohort != \"\") then\r\n    table.insert(children, Panel({ HorizontalLayout(\r\n      {\r\n        Text({ text=\"Cohort\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=characterData.cardsList.cohort, alignment=\"MiddleLeft\" })\r\n      }) }, { minHeight=halfWhenBig(50) }))\r\n    table.insert(hr)\r\n  end\r\n\r\n  return VerticalLayout(children)\r\nend\r\n\r\nfunction skills()\r\n  local children = { }\r\n\r\n  for v in pairs(characterData.skills) do\r\n    table.insert(children, Panel({ HorizontalLayout(concat(\r\n      {\r\n        Text({ text=v, minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=characterData.skills[v].die, minWidth=bigSwitch(50, 20), alignment=\"MiddleLeft\" })\r\n      },\r\n      checkboxes(characterData.skills[v].feats, \"+\", 1, 5, \"skillsCheck\", v .. \"-skills\")\r\n    ), { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) }))\r\n    for w in pairs(characterData.skills[v].skills) do\r\n      table.insert(children, Panel({ Text({ text=\"      \" .. w .. \": \" .. v .. \" +\" .. characterData.skills[v].skills[w], alignment=\"MiddleLeft\" }) }, { minHeight=halfWhenBig(50) }))\r\n    end\r\n    table.insert(children, hr)\r\n  end\r\n\r\n  return VerticalLayout(children)\r\nend\r\n\r\nfunction splitOnSpace(text, split)\r\n  local testText = text:sub(0, split):reverse()\r\n  local match = string.match(testText, \"^%a*\")\r\n  return {text:sub(0, split - #match), text:sub(split + 1 - #match)}\r\nend\r\n\r\nfunction wrap(powerResults, results, remainingLength, maxLength, text)\r\n  if(#text < remainingLength) then\r\n    table.insert(powerResults, Text({text = text, minHeight=halfWhenBig(50), alignment=\"MiddleLeft\"}))\r\n    remainingLength = remainingLength - (#text)\r\n    return { powerResults, results, remainingLength }\r\n  end\r\n\r\n  local split = splitOnSpace(text, remainingLength)\r\n  table.insert(powerResults, Text({text = split[1], minHeight=halfWhenBig(50), alignment=\"MiddleLeft\"}))\r\n  table.insert(results, HorizontalLayout(powerResults, {childForceExpandWidth=false}))\r\n  powerResults = {}\r\n  return wrap(powerResults, results, maxLength, maxLength, split[2])\r\nend\r\n\r\nfunction powers(powers, id)\r\n  local results = {\r\n    Panel({ HorizontalLayout(concat(\r\n      {\r\n        Text({ text=\"Hand Size\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=powers.handSize.base, minWidth=bigSwitch(50, 20), alignment=\"MiddleLeft\" })\r\n      },\r\n      checkboxes(powers.handSize.add, \"\", powers.handSize.base + 1, 5, \"handSizeCheck\", id .. \"-handSize\")\r\n    ), { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) })\r\n  }\r\n\r\n  local profResults = { Text({ text=\"Proficiencies\", minWidth=170, alignment=\"MiddleLeft\" }) }\r\n\r\n  if(powers.proficiencies) then\r\n    for i, v in pairs(powers.proficiencies) do\r\n      if(v.optional) then\r\n        table.insert(profResults, Pad(10))\r\n        table.insert(profResults, Checkbox({ onClick=self.getGUID() .. \"/profCheck\", id=v.name .. \"-\" .. id .. \"-prof\" }))\r\n      end\r\n      table.insert(profResults, Pad(10))\r\n      table.insert(profResults, Text({ text=v.name }))\r\n    end\r\n  end\r\n\r\n  table.insert(results, Panel({ HorizontalLayout(profResults, { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) }))\r\n  table.insert(results, Text({ minHeight=halfWhenBig(50) }))\r\n\r\n  for v in pairs(powers.powers) do\r\n    local characterWidth = bigSwitch(14, 16)\r\n    local power = powers.powers[v]\r\n    local powerResults = {}\r\n    local maxLength = 1500 / characterWidth\r\n    local remainingLength = maxLength\r\n    for i, w in pairs(power) do\r\n      if(i != 1) then\r\n        table.insert(powerResults, Checkbox({ onClick=self.getGUID() .. \"/roleCheck\", id=v .. \"-\" .. i .. \"-\" .. id .. \"-powers\" }))\r\n        remainingLength = remainingLength - 50 / characterWidth\r\n        w = \" \" .. w\r\n      end\r\n      if(remainingLength < #w) then\r\n        local temp = wrap(powerResults, results, remainingLength, maxLength, w);\r\n        powerResults = temp[1]\r\n        results = temp[2]\r\n        remainingLength = temp[3]\r\n      else\r\n        table.insert(powerResults, Text({text = w, minHeight=halfWhenBig(50), alignment=\"MiddleLeft\"}))\r\n        remainingLength = remainingLength - #w\r\n      end\r\n    end\r\n    table.insert(results, HorizontalLayout(powerResults, {childForceExpandWidth=false}))\r\n    table.insert(results, Text({ minHeight=halfWhenBig(50) }))\r\n  end\r\n\r\n  return VerticalLayout(results)\r\nend\r\n\r\nfunction getUI(size)\r\n  isBig = size == \"big\"\r\n\r\n  local props = {\r\n    childForceExpandHeight=false,\r\n    width=halfWhenBig(1500),\r\n    height=halfWhenBig(2350)\r\n  }\r\n\r\n  if(size == \"big\") then\r\n    props.position=\"0 0 -10\"\r\n  else\r\n    props.position=\"0 -25 -10\"\r\n  end\r\n\r\n  local roleData = Panel()\r\n  if(data.role != nil and characterData.roles[data.role + 1] != nil) then\r\n    roleData = Panel({ powers(characterData.roles[data.role + 1].powers, \"role\") }, { minHeight=halfWhenBig(500) })\r\n  end\r\n\r\n  return VerticalLayout(\r\n    {\r\n      Panel({ HorizontalLayout({\r\n        Panel({ characterTitle() }),\r\n        Panel({ traits() })\r\n      }) }, { minHeight=halfWhenBig(100) }),\r\n      Panel({ HorizontalLayout({\r\n        skills(),\r\n        deckList()\r\n      }, { height=0, rectAlignment=\"UpperCenter\" }) }, { minHeight=bigSwitch(500, 200) }),\r\n      Panel({ powers(characterData.powers, \"base\") }, { minHeight=halfWhenBig(500) }),\r\n      Panel({ HorizontalLayout({\r\n        ToggleButton({ minHeight = halfWhenBig(75), text=characterData.roles[1].name, onClick=self.getGUID() .. '/changeRole', id=\"0-role-select\" }),\r\n        ToggleButton({ minHeight = halfWhenBig(75), text=characterData.roles[2].name, onClick=self.getGUID() .. '/changeRole', id=\"1-role-select\" })\r\n      }, { height=0, rectAlignment=\"UpperCenter\" }) }, { minHeight=halfWhenBig(75) }),\r\n      roleData\r\n    },\r\n    props\r\n  )\r\nend\r\n\r\nfunction appendId(contents, id)\r\n  if(contents.attributes.id != nil) then\r\n    contents.attributes.id = contents.attributes.id .. '-' .. id\r\n  end\r\n  if(contents.children) then\r\n    for i,v in pairs(contents.children) do\r\n      contents.children[i] = appendId(v, id)\r\n    end\r\n  end\r\n  return contents\r\nend\r\n\r\nfunction smallSwitch(isSmall, big, small)\r\n  if(isSmall) then\r\n    return small\r\n  else\r\n    return big\r\n  end\r\nend\r\n\r\nfunction build()\r\n  local result = {}\r\n  local isSmall = self.getCustomObject().mesh == smallMesh\r\n\r\n  if(Global.getVar(\"supportsPopout\")) then\r\n    table.insert(result, Button({\r\n      text=\"\\u{261d}\",\r\n      minHeight = 75,\r\n      fontSize=60,\r\n      position=smallSwitch(isSmall, \"-750 1150 -10\", \"-60 0 -10\"),\r\n      width=80,\r\n      height=80,\r\n      onClick=\"popout\"\r\n    }))\r\n    table.insert(result, Button({\r\n      text=smallSwitch(isSmall, \"-\", \"\\u{25A1}\"),\r\n      minHeight = 75,\r\n      fontSize=60,\r\n      position=smallSwitch(isSmall, \"750 1150 -10\", \"60 0 -10\"),\r\n      width=80,\r\n      height=80,\r\n      onClick=\"minimize\"\r\n    }))\r\n  end\r\n\r\n  if(not isSmall) then\r\n    table.insert(result, getUI(\"big\"))\r\n  end\r\n\r\n  self.UI.setXmlTable(result)\r\nend\r\n\r\nfunction minimize()\r\n  local obj = self.getCustomObject();\r\n  local pos = self.getPosition();\r\n  pos.y = pos.y + 2\r\n  if(obj.mesh == bigMesh) then\r\n    obj.mesh = smallMesh\r\n    self.tooltip = true\r\n    pos.z = pos.z + 11.5\r\n    pos.x = pos.x + 7\r\n  else\r\n    obj.mesh = bigMesh\r\n    self.tooltip = false\r\n    pos.z = pos.z - 11.5\r\n    pos.x = pos.x - 7\r\n  end\r\n  self.setCustomObject(obj)\r\n  self.setPosition(pos)\r\n  self.script_state = onSave()\r\n  self.reload()\r\nend\r\n\r\nfunction onLoad(save_state)\r\n  local saveData = JSON.decode(save_state)\r\n  data = saveData.characterData\r\n  characterData = saveData.character\r\n  build()\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction onSave()\r\n  return JSON.encode({\r\n    characterData = data,\r\n    character = characterData\r\n  })\r\nend\r\n\r\nfunction buildWindow(color)\r\n  local contents = getUI(\"small\");\r\n  contents.attributes.id = \"Contents\"\r\n\r\n  return Panel({\r\n    Panel({\r\n      Text({ text=self.getName() .. '/' .. self.getDescription(), class=\"WindowTitle\", offsetXY=\"0 -5\" }),\r\n      Button({\r\n        class=\"topButtons\",\r\n        textColor=\"#000000\",\r\n        text=\"-\",\r\n        offsetXY=\"-40 -10\",\r\n        onClick=\"minimize\",\r\n        id=\"Minimize-\" .. color\r\n      }),\r\n      Button({\r\n          class=\"topButtons\",\r\n          color=\"#990000\",\r\n          textColor=\"#FFFFFF\",\r\n          text=\"X\",\r\n          offsetXY=\"-5 -10\",\r\n          onClick=\"close\",\r\n          id=\"Close-\" .. color\r\n      })\r\n    }, {\r\n      class=\"TopBar\",\r\n      id=\"TopBar-\" .. color\r\n    }),\r\n    appendId(contents, color)\r\n  }, {\r\n    visibility=color,\r\n    fromSheet=self.getGUID(),\r\n    class=\"Window\",\r\n    id=\"Window-\" .. color\r\n  })\r\nend\r\n\r\nfunction rebuildWindows()\r\n  local globalTable = UI.getXmlTable()\r\n\r\n  for i, v in pairs(spawnedWindows) do\r\n    table.insert(globalTable, buildWindow(v))\r\n  end\r\n\r\n  UI.setXmlTable(globalTable, {})\r\nend\r\n\r\nfunction popout(player)\r\n  local globalTable = UI.getXmlTable()\r\n\r\n  local exists = false\r\n\r\n  for i, v in pairs(globalTable) do\r\n    if(v.attributes.visibility == player.color and v.attributes.fromSheet == self.getGUID()) then\r\n      return\r\n    end\r\n  end\r\n\r\n  table.insert(globalTable, buildWindow(player.color))\r\n  UI.setXmlTable(globalTable, {})\r\n  table.insert(spawnedWindows, player.color)\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction setChk(id, v)\r\n  local value = \"false\"\r\n  if(v) then\r\n    value = \"true\"\r\n  end\r\n  self.UI.setAttribute(id, \"isOn\", value)\r\n\r\n  for i, window in pairs(spawnedWindows) do\r\n    UI.setAttribute(id .. '-' .. window, \"isOn\", value)\r\n  end\r\nend\r\n\r\nfunction loadSettings()\r\n  for i, stat in pairs({\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"}) do\r\n    if(data[stat] != nil) then\r\n      for i, v in pairs(data[stat]) do\r\n        setChk(i .. \"-\" .. stat .. \"-skills\", v)\r\n      end\r\n    end\r\n  end\r\n  for i, stat in pairs({\"Armor\", \"Spell\", \"Blessing\", \"Ally\", \"Weapon\", \"Item\"}) do\r\n    if(data.deckList[stat] != nil) then\r\n      for i, v in pairs(data.deckList[stat]) do\r\n        setChk(i + 1 .. \"-\" .. stat .. \"-deckList\", v)\r\n      end\r\n    end\r\n  end\r\n  if(data.handSize != nil) then\r\n    for i, v in pairs(data.handSize) do\r\n      setChk(i + 1 .. \"-base-handSize\", v)\r\n    end\r\n  end\r\n  if(data.roleHandSize != nil) then\r\n    for i, v in pairs(data.roleHandSize) do\r\n      setChk(i + 1 .. \"-role-handSize\", v)\r\n    end\r\n  end\r\n  if(data.powers != nil) then\r\n    for i, v in pairs(data.powers) do\r\n      for j, w in pairs(v) do\r\n        setChk(i + 1 .. \"-\" .. j + 2 .. \"-base-powers\", w)\r\n      end\r\n    end\r\n  end\r\n  if(data.rolePowers != nil) then\r\n    for i, v in pairs(data.rolePowers) do\r\n      for j, w in pairs(v) do\r\n        setChk(i + 1 .. \"-\" .. j + 2 .. \"-role-powers\", w)\r\n      end\r\n    end\r\n  end\r\n  if(data.proficiencies != nil) then\r\n    for i, v in pairs(data.proficiencies) do\r\n      setChk(i .. \"-base-prof\", v)\r\n    end\r\n  end\r\n  if(data.roleProficiencies != nil) then\r\n    for i, v in pairs(data.roleProficiencies) do\r\n      setChk(i .. \"-role-prof\", v)\r\n    end\r\n  end\r\n  if(data.role != nil) then\r\n    setChk(\"0-role-select\", false)\r\n    setChk(\"1-role-select\", false)\r\n    setChk(data.role .. \"-role-select\", true)\r\n  end\r\nend\r\n\r\nfunction handSizeCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local idx = tostring(tonumber(split[1]) - 1)\r\n  local prop = \"handSize\"\r\n  if(split[2] == \"role\") then\r\n    prop = \"roleHandSize\"\r\n  end\r\n  data[prop][idx] = not data[prop][idx]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction skillsCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  data[split[2]][tonumber(split[1])] = not data[split[2]][tonumber(split[1])]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction decklistCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local idx = tostring(tonumber(split[1]) - 1)\r\n  data.deckList[split[2]][idx] = not data.deckList[split[2]][idx]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction roleCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local idx1 = tostring(tonumber(split[1]) - 1)\r\n  local idx2 = tostring(tonumber(split[2]) - 2)\r\n  local prop = \"powers\"\r\n  if(split[3] == \"role\") then\r\n    prop = \"rolePowers\"\r\n  end\r\n  data[prop][idx1][idx2] = not data[prop][idx1][idx2]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction profCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local prop = \"proficiencies\"\r\n  if(split[2] == \"role\") then\r\n    prop = \"roleProficiencies\"\r\n  end\r\n  data[prop][split[1]] = not data[prop][split[1]]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction changeRole(player, value, id)\r\n  local split = split(id, \"-\")\r\n  data.role = tonumber(split[1])\r\n  data.roleHandSize = {}\r\n  data.roleProficiencies = {}\r\n  data.rolePowers = {}\r\n  build()\r\n  rebuildWindows()\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\n--[[\r\n  This is a library of useful lua functions for table top simulator\r\n\r\n  To use this library you will need to have the atom editor installed with the\r\n  TTS plugin. Once that is complete open Settings, Click Packages, Under\r\n  tabletopsimulator-lua click settings, check the \"Experimental: insert other\r\n  files specified in source code\", and set the path for the includes (I used\r\n  Documents/My Games/Tabletop Simulator. You will need to go there in windows\r\n  explorer and copy the path over). Finally you will need to save this file in\r\n  that folder as \"Little Lua Library.ttslua\". Once all that is complete you can\r\n  drop \"#include Little Lua Library\" anywhere in your file (recommended: at the\r\n  top or bottom) to get access to these functions\r\n\r\n  Note: This will need to overwrite the update method. If you need this\r\n  functionality put your code in a baseUpdate method instead\r\n]]\r\n\r\n--[[\r\n  This will trim any pattern from the front/end of a string. Defaults to\r\n  trimming whitespace\r\n]]\r\nfunction trim(s, patternToTrim)\r\n  local trimPattern = patternToTrim or \"%s\"\r\n  return s:match(\"^\" .. trimPattern .. \"*(.*)$\"):match(\"^(.*)\" .. trimPattern .. \"*$\")\r\nend\r\n\r\n--[[\r\n  This splits a string using a delimeter. It will also trim the items by default\r\n]]\r\nfunction split(value, delim, dontTrim)\r\n  local realDelim = delim or ','\r\n  local result = {}\r\n  local i = 1\r\n  local currentValue = value or ''\r\n\r\n  local idx = currentValue:find(realDelim)\r\n\r\n  while idx do\r\n    local s = currentValue:sub(1, idx - 1)\r\n\t\tif dontTrim then\r\n      result[i] = s\r\n    else\r\n      result[i] = trim(s)\r\n    end\r\n    i = i + 1\r\n\r\n    currentValue = currentValue:sub(idx + 1)\r\n    idx = currentValue:find(realDelim)\r\n  end\r\n\r\n\tif dontTrim then\r\n    result[i] = currentValue\r\n  else\r\n    result[i] = trim(currentValue)\r\n  end\r\n\r\n  return result\r\nend\r\n\r\n--[[\r\n  This will check to see if a list has an item\r\n]]\r\nfunction hasItem(value, target, delim, dontTrim)\r\n\tlocal items = split(value, delim, dontTrim)\r\n\r\n\tfor i, s in pairs(items) do\r\n\t\tif(s == target) then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend\r\n\r\n\treturn false\r\nend\r\n\r\n--[[\r\n  This is a noop method for use in label buttons\r\n]]\r\nfunction noop() end\r\n\r\n--[[\r\n  This will print the position of an object, useful for figuring out initial\r\n  positions of things while building scripts\r\n]]\r\nfunction printPosition(label, object)\r\n  local position = object.getPosition()\r\n  print(label .. ' ' .. position.x .. ',' .. position.y .. ',' .. position.z)\r\nend\r\n\r\nluaLibraryTimeoutQueue = {}\r\nluaLibraryTimeoutStart = 1\r\nluaLibraryTimeoutNext = 1\r\n\r\n--[[\r\n  This acts similar to the setTimeout function in js, the primary difference is\r\n  that this one will run your method so many frames later instead of being\r\n  time based\r\n]]\r\nfunction setTimeout(fn, params, frameCount)\r\n  luaLibraryTimeoutQueue[luaLibraryTimeoutNext] = {\r\n    fn = fn,\r\n    params = params,\r\n    frameCount = frameCount\r\n  }\r\n  luaLibraryTimeoutNext = luaLibraryTimeoutNext + 1\r\nend\r\n\r\nfunction update()\r\n  if luaLibraryTimeoutQueue[luaLibraryTimeoutStart] then\r\n    for i=luaLibraryTimeoutStart,(luaLibraryTimeoutNext - 1) do\r\n      if luaLibraryTimeoutQueue[i] then\r\n        luaLibraryTimeoutQueue[i].frameCount = luaLibraryTimeoutQueue[i].frameCount - 1\r\n\r\n        if luaLibraryTimeoutQueue[i].frameCount <= 0 then\r\n          local fn = luaLibraryTimeoutQueue[i].fn\r\n        local params = luaLibraryTimeoutQueue[i].params\r\n          luaLibraryTimeoutQueue[i] = nil\r\n          fn(params)\r\n        end\r\n      end\r\n\r\n      if not luaLibraryTimeoutQueue[i] and luaLibraryTimeoutStart == i then\r\n        luaLibraryTimeoutStart = luaLibraryTimeoutStart + 1\r\n      end\r\n    end\r\n  end\r\n\r\n  if baseUpdate then\r\n    baseUpdate()\r\n  end\r\nend\r\n\n----  #include NewestCharacterSheet\n            ]========],\r\n            LuaScriptState = JSON.encode({\r\n              character = data[v],\r\n              characterData = {\r\n                roleHandSize = {},\r\n                roleProficiencies= {},\r\n                rolePowers= {},\r\n                Strength= {},\r\n                Dexterity= {},\r\n                Constitution= {},\r\n                Intelligence= {},\r\n                Wisdom= {},\r\n                Charisma= {},\r\n                handSize= {},\r\n                proficiencies= {},\r\n                powers= {},\r\n                role= 2,\r\n                deckList= {},\r\n              }\r\n            })\r\n          })\r\n        end\r\n        local pos = self.getPosition()\r\n        pos.y = pos.y + 5;\r\n        \r\n\r\n        spawnObjectJSON({\r\n          json = JSON.encode({\r\n            Name = \"Bag\",\r\n            Transform = {\r\n              posX = 1,\r\n              posY = 1,\r\n              posZ = 1,\r\n              rotX = 0,\r\n              rotY = 0,\r\n              rotZ = 0,\r\n              scaleX = 1,\r\n              scaleY = 1,\r\n              scaleZ = 1,\r\n            },\r\n            Nickname = \"\",\r\n            Description = \"\",\r\n            GMNotes = \"\",\r\n            ColorDiffuse = {\r\n              r = 0,\r\n              g = 0,\r\n              b = 0\r\n            },\r\n            Locked = false,\r\n            Grid = true,\r\n            Snap = true,\r\n            IgnoreFoW = false,\r\n            Autoraise = true,\r\n            Sticky = true,\r\n            Tooltip = true,\r\n            GridProjection = false,\r\n            HideWhenFaceDown = false,\r\n            Hands = false,\r\n            MaterialIndex = -1,\r\n            MeshIndex = -1,\r\n            XmlUI = \"\",\r\n            LuaScript = \"\",\r\n            LuaScriptState = \"\",\r\n            ContainedObjects = results,\r\n            GUID = \"deadbf\"\r\n          }),\r\n          position = pos,\r\n          rotation = {0, 0, 0},\r\n          scale = {1, 1, 1},\r\n          sound = false,\r\n          snap_to_grid = false\r\n        })\r\n        running = false\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n\r\nfunction noop()\r\nend",
            "LuaScriptState": "",
            "XmlUI": "",
            "GUID": "a459ce",
            "AttachedSnapPoints": [
                {
                    "Position": {
                        "x": 0.008181724,
                        "y": 0.04999996,
                        "z": 0.811785758
                    },
                    "Rotation": {
                        "x": 1.99010032e-7,
                        "y": 359.9575,
                        "z": -0.00000143850832
                    }
                }
            ]
        },
        {
            "Name": "Custom_Tile",
            "Transform": {
                "posX": 2.384933,
                "posY": 98.05715,
                "posZ": -47.70175,
                "rotX": 0.01686364,
                "rotY": 180.0039,
                "rotZ": 0.07987743,
                "scaleX": 1.31007314,
                "scaleY": 1,
                "scaleZ": 1.31007314
            },
            "Nickname": "Chronicle Sheet",
            "Description": "",
            "GMNotes": "",
            "ColorDiffuse": {
                "r": 1,
                "g": 1,
                "b": 1
            },
            "Locked": true,
            "Grid": true,
            "Snap": true,
            "IgnoreFoW": false,
            "MeasureMovement": false,
            "DragSelectable": true,
            "Autoraise": true,
            "Sticky": true,
            "Tooltip": true,
            "GridProjection": false,
            "HideWhenFaceDown": false,
            "Hands": false,
            "CustomImage": {
                "ImageURL": "http://cloud-3.steamusercontent.com/ugc/1021699208974753862/F25B86A77A31B904B481280A0F6B2C9795EC38CC/",
                "ImageSecondaryURL": "http://cloud-3.steamusercontent.com/ugc/1021699208974753862/F25B86A77A31B904B481280A0F6B2C9795EC38CC/",
                "ImageScalar": 1,
                "WidthScale": 0,
                "CustomTile": {
                    "Type": 0,
                    "Thickness": 0.1,
                    "Stackable": false,
                    "Stretch": true
                }
            },
            "LuaScript": "value = {}\r\n\r\nfunction onLoad(save_state)\r\n  if(self.UI.getCustomAssets() == nil) then\r\n    self.UI.setCustomAssets({\r\n      {\r\n        name = \"Logo\",\r\n        url = \"https://static2.paizo.com/image/content/PathfinderSociety/PFSACG-LandingLogo.png\"\r\n      },\r\n      {\r\n        name = \"Paste\",\r\n        url = \"http://cloud-3.steamusercontent.com/ugc/1021699268804127014/CFF926A940ACCC6B0A2632E12DE5AF296471189C/\"\r\n      },\r\n      {\r\n        name = \"Spawn\",\r\n        url = \"http://cloud-3.steamusercontent.com/ugc/1021699521565637250/93B89C218CCA59E15193BFFC6297389F57F54AD7/\"\r\n      }\r\n    })\r\n  end\r\n\r\n  value = JSON.decode(save_state)\r\n\r\n  if(value == nil) then\r\n    value = {}\r\n  end\r\n\r\n  setTimeout(loadValues, nil, 20)\r\nend\r\n\r\nfunction loadValues()\r\n  for k in pairs(value) do\r\n    if(value[k] == \"True\" or value[k] == \"False\") then\r\n      self.UI.setAttribute(k, \"isOn\", value[k])\r\n    else\r\n      self.UI.setAttribute(k, \"text\", value[k])\r\n    end\r\n  end\r\nend\r\n\r\nfunction onSave()\r\n  return JSON.encode(value)\r\nend\r\n\r\nfunction saveValue(player, newValue, id)\r\n  value[id] = newValue\r\nend\r\n\r\npaste = false\r\nfunction togglePaste()\r\n  paste = not paste\r\n\r\n  if paste then\r\n    self.UI.show(\"pasteView\")\r\n    self.UI.hide(\"editView\")\r\n    self.UI.setAttribute(\"pasteText\", \"text\", buildPasteText())\r\n  else\r\n    self.UI.hide(\"pasteView\")\r\n    self.UI.show(\"editView\")\r\n  end\r\nend\r\n\r\nfunction getValue(key)\r\n  if(value[key] == nil) then\r\n    return \"\"\r\n  end\r\n  return value[key]\r\nend\r\n\r\nfunction getCheckValue(key)\r\n  if(value[key] == \"True\") then\r\n    return \"☑\"\r\n  end\r\n  return \"☐\"\r\nend\r\n\r\nfunction buildPasteText()\r\n  local nl = \"\\r\\n\"\r\n  local hr = rightPad(\"\", 112, \"—\") .. nl\r\n  local result = \"```\" .. nl\r\n  result = result .. rightPad(\"Player Name: \" .. getValue(\"playerName\"), 40) .. \"Character Name: \" .. getValue(\"characterName\") .. nl\r\n  result = result .. rightPad(\"Organized Play #: \" .. getValue(\"playNumber\"), 40) .. \"Class: \" .. getValue(\"class\") .. nl\r\n  result = result .. nl\r\n  result = result .. hr\r\n  result = result .. rightPad(\"Scenario: \" .. getValue(\"scenario\"), 70) .. rightPad(\"Tier: \" .. getValue(\"tier\"), 10) .. rightPad(\"XP: \" .. getValue(\"xp\"), 10) .. \"Date: \" .. getValue(\"date\")\r\n  result = result .. hr\r\n  result = result .. rightPad(\"Event #: \" .. getValue(\"eventNumber\"), 40) .. rightPad(\"Coordinator OP #: \" .. getValue(\"coordinatorOp\"), 40) .. \"Reported?: \" .. getCheckValue(\"reported\") .. nl\r\n  result = result .. hr\r\n  result = result .. \"Reward: \" .. getCheckValue(\"reward\") .. nl\r\n  local reward = split(getValue(\"rewardText\"), \"\\n\")\r\n  for i, v in ipairs(reward) do\r\n    result = result .. v .. nl\r\n  end\r\n  result = result .. rightPad(getCheckValue(\"replayed\") .. \" None - Replayed Scenario\", 55) .. getCheckValue(\"failed\") .. \" None - Failed Scenario\" .. nl\r\n  result = result .. hr\r\n  result = result .. rightPad(\"Hero Point Spend: \", 20) .. rightPad(getCheckValue(\"skillFeat\") .. \" Skill Feat\", 14) .. rightPad(getCheckValue(\"powerFeat\") .. \" Power Feat\", 14) .. rightPad(getCheckValue(\"cardFeat\") .. \" Card Feat\", 14) .. rightPad(getCheckValue(\"noSpend\") .. \" Did Not Spend\", 16) .. rightPad(\"Used: \" .. getValue(\"used\"), 15) .. \"Remaining: \" .. getValue(\"remaining\") .. nl\r\n  result = result .. hr\r\n  result = result .. rightPad(\"Deck Upgrade: \" .. getValue(\"upgrade\") .. ' ', 37) .. rightPad(\"Bonus Deck Upgrade: \" .. getValue(\"upgrade2\") .. ' ', 37) .. \"Bonus Deck Upgrade: \" .. getValue(\"upgrade3\") .. nl\r\n  result = result .. hr\r\n  result = result .. \"Notes:\" .. nl\r\n  local notes = split(getValue(\"notes\"), \"\\n\")\r\n  for i, v in ipairs(notes) do\r\n    result = result .. v .. nl\r\n  end\r\n  result = result .. hr\r\n  result = result .. \"```\"\r\n  return result\r\nend\r\n\r\nfunction rightPad(value, count, char)\r\n  local res = value .. string.rep(char or ' ', count - #value)\r\n\r\n\treturn res, res ~= value\r\nend\r\n\r\nfunction SpawnDeck()\r\n  SpawnDeckFromSite(\"https://us-central1-pacg-deckbuilder.cloudfunctions.net/getTTSDeckByOrgPlayId/\" .. getValue(\"playNumber\"))\r\nend\r\n\r\n----#include Little Lua Library\n--[[\r\n  This is a library of useful lua functions for table top simulator\r\n\r\n  To use this library you will need to have the atom editor installed with the\r\n  TTS plugin. Once that is complete open Settings, Click Packages, Under\r\n  tabletopsimulator-lua click settings, check the \"Experimental: insert other\r\n  files specified in source code\", and set the path for the includes (I used\r\n  Documents/My Games/Tabletop Simulator. You will need to go there in windows\r\n  explorer and copy the path over). Finally you will need to save this file in\r\n  that folder as \"Little Lua Library.ttslua\". Once all that is complete you can\r\n  drop \"#include Little Lua Library\" anywhere in your file (recommended: at the\r\n  top or bottom) to get access to these functions\r\n\r\n  Note: This will need to overwrite the update method. If you need this\r\n  functionality put your code in a baseUpdate method instead\r\n]]\r\n\r\n--[[\r\n  This will trim any pattern from the front/end of a string. Defaults to\r\n  trimming whitespace\r\n]]\r\nfunction trim(s, patternToTrim)\r\n  local trimPattern = patternToTrim or \"%s\"\r\n  return s:match(\"^\" .. trimPattern .. \"*(.*)$\"):match(\"^(.*)\" .. trimPattern .. \"*$\")\r\nend\r\n\r\n--[[\r\n  This splits a string using a delimeter. It will also trim the items by default\r\n]]\r\nfunction split(value, delim, dontTrim)\r\n  local realDelim = delim or ','\r\n  local result = {}\r\n  local i = 1\r\n  local currentValue = value or ''\r\n\r\n  local idx = currentValue:find(realDelim)\r\n\r\n  while idx do\r\n    local s = currentValue:sub(1, idx - 1)\r\n\t\tif dontTrim then\r\n      result[i] = s\r\n    else\r\n      result[i] = trim(s)\r\n    end\r\n    i = i + 1\r\n\r\n    currentValue = currentValue:sub(idx + 1)\r\n    idx = currentValue:find(realDelim)\r\n  end\r\n\r\n\tif dontTrim then\r\n    result[i] = currentValue\r\n  else\r\n    result[i] = trim(currentValue)\r\n  end\r\n\r\n  return result\r\nend\r\n\r\n--[[\r\n  This will check to see if a list has an item\r\n]]\r\nfunction hasItem(value, target, delim, dontTrim)\r\n\tlocal items = split(value, delim, dontTrim)\r\n\r\n\tfor i, s in pairs(items) do\r\n\t\tif(s == target) then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend\r\n\r\n\treturn false\r\nend\r\n\r\n--[[\r\n  This is a noop method for use in label buttons\r\n]]\r\nfunction noop() end\r\n\r\n--[[\r\n  This will print the position of an object, useful for figuring out initial\r\n  positions of things while building scripts\r\n]]\r\nfunction printPosition(label, object)\r\n  local position = object.getPosition()\r\n  print(label .. ' ' .. position.x .. ',' .. position.y .. ',' .. position.z)\r\nend\r\n\r\nluaLibraryTimeoutQueue = {}\r\nluaLibraryTimeoutStart = 1\r\nluaLibraryTimeoutNext = 1\r\n\r\n--[[\r\n  This acts similar to the setTimeout function in js, the primary difference is\r\n  that this one will run your method so many frames later instead of being\r\n  time based\r\n]]\r\nfunction setTimeout(fn, params, frameCount)\r\n  luaLibraryTimeoutQueue[luaLibraryTimeoutNext] = {\r\n    fn = fn,\r\n    params = params,\r\n    frameCount = frameCount\r\n  }\r\n  luaLibraryTimeoutNext = luaLibraryTimeoutNext + 1\r\nend\r\n\r\nfunction update()\r\n  if luaLibraryTimeoutQueue[luaLibraryTimeoutStart] then\r\n    for i=luaLibraryTimeoutStart,(luaLibraryTimeoutNext - 1) do\r\n      if luaLibraryTimeoutQueue[i] then\r\n        luaLibraryTimeoutQueue[i].frameCount = luaLibraryTimeoutQueue[i].frameCount - 1\r\n\r\n        if luaLibraryTimeoutQueue[i].frameCount <= 0 then\r\n          local fn = luaLibraryTimeoutQueue[i].fn\r\n        local params = luaLibraryTimeoutQueue[i].params\r\n          luaLibraryTimeoutQueue[i] = nil\r\n          fn(params)\r\n        end\r\n      end\r\n\r\n      if not luaLibraryTimeoutQueue[i] and luaLibraryTimeoutStart == i then\r\n        luaLibraryTimeoutStart = luaLibraryTimeoutStart + 1\r\n      end\r\n    end\r\n  end\r\n\r\n  if baseUpdate then\r\n    baseUpdate()\r\n  end\r\nend\r\n\n----#include Little Lua Library\n----#include SpawnDeckFromSite\nlocal running = false\r\n\r\nfunction SpawnDeckFromSite(url)\r\n  if(running) then\r\n    return\r\n  end\r\n  running = true\r\n  self.setColorTint({1, 0, 0})\r\n\tWebRequest.get(url, self, \"SpawnDeckFromSiteBuildDeck\")\r\nend\r\n\r\nfunction getData(cards, deckName)\r\n  if #cards == 0 then\r\n    return nil\r\n  elseif #cards == 1 then\r\n    return cards[1].data\r\n  else\r\n    return Decker.Deck(cards, { name = deckName }).data\r\n  end\r\nend\r\n\r\nfunction SpawnDeckFromSiteBuildDeck(result)\r\n  if(result.is_done) then\r\n    self.setColorTint({1, 1, 1})\r\n    if(result.is_error) then\r\n      print(\"Error while loading deck: \" .. result.error)\r\n      running = false\r\n    else\r\n      data = JSON.decode(result.text)\r\n      if(data.error) then\r\n        print(\"Error while loading deck: \" .. data.error)\r\n        running = false\r\n      else\r\n        local boxes = {}\r\n        local pos = self.getPosition()\r\n        pos.y = pos.y + 5;\r\n        pos.z = pos.z + 3;\r\n\r\n        for box in pairs(data.boxes) do\r\n          boxes[box] = toCards(data.boxes[box])\r\n        end\r\n\r\n        local results = {}\r\n        local playerDeck = {}\r\n        for i, v in ipairs(data.cards) do\r\n          local box = data.cards[i].box\r\n          local card = data.cards[i].card\r\n          local deck = data.cards[i].deck\r\n          table.insert(playerDeck, boxes[box][deck][card])\r\n          if(data.boxes[box].Decks[deck][card] != nil and data.boxes[box].Decks[deck][card].count != nil and data.boxes[box].Decks[deck][card].count > 1) then\r\n            data.boxes[box].Decks[deck][card].count = data.boxes[box].Decks[deck][card].count - 1\r\n          else\r\n            boxes[box][deck][card] = nil\r\n          end\r\n        end\r\n\r\n        for box in pairs(boxes) do\r\n          local boxResults = {}\r\n          for deck in pairs(boxes[box]) do\r\n            local cards = {}\r\n            for card in pairs(boxes[box][deck]) do\r\n              if(data.boxes[box].Decks[deck][card].count != nil) then\r\n                for i=1,data.boxes[box].Decks[deck][card].count,1 do\r\n                  table.insert(cards, boxes[box][deck][card])\r\n                end\r\n              else\r\n                table.insert(cards, boxes[box][deck][card])\r\n              end\r\n            end\r\n            table.insert(boxResults, getData(cards, deck))\r\n          end\r\n          table.insert(results, {\r\n            Name = \"Bag\",\r\n            Transform = {\r\n              posX = 1,\r\n              posY = 1,\r\n              posZ = 1,\r\n              rotX = 0,\r\n              rotY = 0,\r\n              rotZ = 0,\r\n              scaleX = 1,\r\n              scaleY = 1,\r\n              scaleZ = 1,\r\n            },\r\n            Nickname = box,\r\n            Description = \"\",\r\n            GMNotes = \"\",\r\n            ColorDiffuse = {\r\n              r = 1,\r\n              g = 1,\r\n              b = 1\r\n            },\r\n            Locked = false,\r\n            Grid = true,\r\n            Snap = true,\r\n            IgnoreFoW = false,\r\n            Autoraise = true,\r\n            Sticky = true,\r\n            Tooltip = true,\r\n            GridProjection = false,\r\n            HideWhenFaceDown = false,\r\n            Hands = false,\r\n            MaterialIndex = -1,\r\n            MeshIndex = -1,\r\n            XmlUI = \"\",\r\n            LuaScript = \"\",\r\n            LuaScriptState = \"\",\r\n            ContainedObjects = boxResults,\r\n            GUID = \"deadbf\"\r\n          })\r\n        end\r\n\r\n        table.insert(results, getData(playerDeck, \"Character Deck\"))\r\n        table.insert(results, {\r\n          Autoraise = true,\r\n          ColorDiffuse = {\r\n            r = 1,\r\n            g = 1,\r\n            b = 1\r\n          },\r\n          CustomMesh = {\r\n            CastShadows = false,\r\n            ColliderURL = \"\",\r\n            Convex = true,\r\n            CustomShader = {\r\n              FresnelStrength = 0,\r\n              SpecularColor = {\r\n                r = 1,\r\n                g = 1,\r\n                b = 1\r\n              },\r\n              SpecularIntensity = 0.05,\r\n              SpecularSharpness = 2\r\n            },\r\n            DiffuseURL = \"\",\r\n            MaterialIndex = 1,\r\n            MeshURL = \"http://pastebin.com/raw.php?i=Jwhwpv7B\",\r\n            NormalURL = \"\",\r\n            TypeIndex = 4\r\n          },\r\n          Description = data.characterDeck,\r\n          GMNotes = \"\",\r\n          Grid = false,\r\n          GridProjection = false,\r\n          Guid = \"deadbf\",\r\n          Hands = false,\r\n          HideWhenFaceDown = false,\r\n          IgnoreFoW = false,\r\n          Locked = false,\r\n          Name = \"Custom_Model\",\r\n          Nickname = data.characterName,\r\n          Snap = false,\r\n          Sticky = true,\r\n          Tooltip = false,\r\n          Transform = {\r\n            posX = 1,\r\n            posY = 1,\r\n            posZ = 1,\r\n            rotX = 0,\r\n            rotY = 0,\r\n            rotZ = 0,\r\n            scaleX = 1,\r\n            scaleY = 1,\r\n            scaleZ = 1,\r\n          },\r\n          XmlUI = \"\",\r\n          LuaScript = [========[\r\n----#include NewestCharacterSheet\ndata = {}\r\ncharacterData = {}\r\nspawnedWindows = {}\r\nbigMesh=\"http://pastebin.com/raw.php?i=Jwhwpv7B\"\r\nsmallMesh=\"https://gist.githubusercontent.com/waterfoul/5aeb5e6db9825639d7b1cd1e24448cab/raw/57e8b5af4dd0627a6d96b456752f695879c5b1e9/model\"\r\n\r\nhr = { tag=\"Image\", attributes={ minHeight=5, minWidth=5, color=\"#AAAAAA\" } }\r\n\r\nisBig = true\r\nfunction Panel(children, attributes)\r\n  return { tag=\"Panel\", attributes=attributes or {}, children=children }\r\nend\r\n\r\nfunction halfWhenBig(big)\r\n  if isBig then\r\n    return big\r\n  end\r\n  return big / 2.75\r\nend\r\n\r\nfunction bigSwitch(big, small)\r\n  if isBig then\r\n    return big\r\n  end\r\n  return small\r\nend\r\n\r\nfunction Text(attributes)\r\n  if(attributes.fontSize == nil) then\r\n    attributes.fontSize=halfWhenBig(30)\r\n  end\r\n  return { tag=\"Text\", attributes=attributes }\r\nend\r\n\r\nfunction Button(attributes)\r\n  attributes = attributes or {}\r\n  if(attributes.fontSize == nil) then\r\n    attributes.fontSize=halfWhenBig(30)\r\n  end\r\n  return { tag=\"Button\", attributes=attributes }\r\nend\r\n\r\nfunction HorizontalLayout(children, attributes)\r\n  return { tag=\"HorizontalLayout\", attributes=attributes or {}, children=children }\r\nend\r\n\r\nfunction VerticalLayout(children, attributes)\r\n  return { tag=\"VerticalLayout\", attributes=attributes or {}, children=children }\r\nend\r\n\r\nfunction ToggleButton(attributes)\r\n  attributes = attributes or {}\r\n  if(attributes.fontSize == nil) then\r\n    attributes.fontSize=halfWhenBig(30)\r\n  end\r\n  return { tag=\"ToggleButton\", attributes=attributes }\r\nend\r\nfunction Pad(width)\r\n  return Text({ minWidth = halfWhenBig(width) })\r\nend\r\n\r\nfunction Checkbox(attributes)\r\n  local size = halfWhenBig(40, 20)\r\n  attributes = attributes or {}\r\n  if(attributes.width == nil) then\r\n    attributes.width = size\r\n  end\r\n  if(attributes.height == nil) then\r\n    attributes.height = size\r\n  end\r\n  return Panel({ ToggleButton(attributes) }, { minWidth=bigSwitch(50, 20), childForceExpandHeight=false })\r\nend\r\n\r\nfunction traits()\r\n  return Text({ text=table.concat(characterData.traits or {}, \", \") })\r\nend\r\n\r\nfunction characterTitle()\r\n  return HorizontalLayout({\r\n    Text({ text=self.getName() }),\r\n    Text({ text=self.getDescription() })\r\n  })\r\nend\r\n\r\nfunction checkboxes(count, prefix, start, pad, handler, id)\r\n  local result = {}\r\n  for i=start,(count + start - 1) do\r\n    table.insert(result, Pad(pad))\r\n    table.insert(result, Checkbox({ onClick=self.getGUID() .. '/' .. handler, id=(i - start + 1) .. '-' .. id}))\r\n    table.insert(result, Pad(pad))\r\n    table.insert(result, Text({ text=(prefix .. i) }))\r\n  end\r\n  return result\r\nend\r\n\r\nfunction concat(t1, t2)\r\n  for i=1,#t2 do\r\n      t1[#t1+1] = t2[i]\r\n  end\r\n  return t1\r\nend\r\n\r\nfunction deckList()\r\n  local children = { Panel({ HorizontalLayout(\r\n    {\r\n      Text({ text=\"Favored Card Type\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n      Text({ text=characterData.cardsList.favoredCardType, alignment=\"MiddleLeft\" })\r\n    }) }, { minHeight=halfWhenBig(50) }), hr }\r\n\r\n  for v in pairs(characterData.cardsList) do\r\n    if(v != \"favoredCardType\" and v != \"special\" and v != \"cohort\") then\r\n      local base = characterData.cardsList[v].base;\r\n      if(base == 0) then\r\n        base = \"-\"\r\n      end\r\n      table.insert(children, Panel({ HorizontalLayout(concat(\r\n        {\r\n          Text({ text=v, minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n          Text({ text=base, minWidth=bigSwitch(50, 20), alignment=\"MiddleLeft\" })\r\n        },\r\n        checkboxes(characterData.cardsList[v].add, \"\", characterData.cardsList[v].base + 1, 20, \"decklistCheck\", v .. \"-deckList\")\r\n      ), { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) }))\r\n      table.insert(children, hr)\r\n    end\r\n  end\r\n\r\n  if(characterData.cardsList.special != nil and characterData.cardsList.special != \"\") then\r\n    table.insert(children, Panel({ HorizontalLayout(\r\n      {\r\n        Text({ text=\"Special\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=characterData.cardsList.special, alignment=\"MiddleLeft\" })\r\n      }) }, { minHeight=halfWhenBig(50) }))\r\n    table.insert(hr)\r\n  end\r\n\r\n  if(characterData.cardsList.cohort != nil and characterData.cardsList.cohort != \"\") then\r\n    table.insert(children, Panel({ HorizontalLayout(\r\n      {\r\n        Text({ text=\"Cohort\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=characterData.cardsList.cohort, alignment=\"MiddleLeft\" })\r\n      }) }, { minHeight=halfWhenBig(50) }))\r\n    table.insert(hr)\r\n  end\r\n\r\n  return VerticalLayout(children)\r\nend\r\n\r\nfunction skills()\r\n  local children = { }\r\n\r\n  for v in pairs(characterData.skills) do\r\n    table.insert(children, Panel({ HorizontalLayout(concat(\r\n      {\r\n        Text({ text=v, minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=characterData.skills[v].die, minWidth=bigSwitch(50, 20), alignment=\"MiddleLeft\" })\r\n      },\r\n      checkboxes(characterData.skills[v].feats, \"+\", 1, 5, \"skillsCheck\", v .. \"-skills\")\r\n    ), { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) }))\r\n    for w in pairs(characterData.skills[v].skills) do\r\n      table.insert(children, Panel({ Text({ text=\"      \" .. w .. \": \" .. v .. \" +\" .. characterData.skills[v].skills[w], alignment=\"MiddleLeft\" }) }, { minHeight=halfWhenBig(50) }))\r\n    end\r\n    table.insert(children, hr)\r\n  end\r\n\r\n  return VerticalLayout(children)\r\nend\r\n\r\nfunction splitOnSpace(text, split)\r\n  local testText = text:sub(0, split):reverse()\r\n  local match = string.match(testText, \"^%a*\")\r\n  return {text:sub(0, split - #match), text:sub(split + 1 - #match)}\r\nend\r\n\r\nfunction wrap(powerResults, results, remainingLength, maxLength, text)\r\n  if(#text < remainingLength) then\r\n    table.insert(powerResults, Text({text = text, minHeight=halfWhenBig(50), alignment=\"MiddleLeft\"}))\r\n    remainingLength = remainingLength - (#text)\r\n    return { powerResults, results, remainingLength }\r\n  end\r\n\r\n  local split = splitOnSpace(text, remainingLength)\r\n  table.insert(powerResults, Text({text = split[1], minHeight=halfWhenBig(50), alignment=\"MiddleLeft\"}))\r\n  table.insert(results, HorizontalLayout(powerResults, {childForceExpandWidth=false}))\r\n  powerResults = {}\r\n  return wrap(powerResults, results, maxLength, maxLength, split[2])\r\nend\r\n\r\nfunction powers(powers, id)\r\n  local results = {\r\n    Panel({ HorizontalLayout(concat(\r\n      {\r\n        Text({ text=\"Hand Size\", minWidth=bigSwitch(170, 70), alignment=\"MiddleLeft\" }),\r\n        Text({ text=powers.handSize.base, minWidth=bigSwitch(50, 20), alignment=\"MiddleLeft\" })\r\n      },\r\n      checkboxes(powers.handSize.add, \"\", powers.handSize.base + 1, 5, \"handSizeCheck\", id .. \"-handSize\")\r\n    ), { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) })\r\n  }\r\n\r\n  local profResults = { Text({ text=\"Proficiencies\", minWidth=170, alignment=\"MiddleLeft\" }) }\r\n\r\n  if(powers.proficiencies) then\r\n    for i, v in pairs(powers.proficiencies) do\r\n      if(v.optional) then\r\n        table.insert(profResults, Pad(10))\r\n        table.insert(profResults, Checkbox({ onClick=self.getGUID() .. \"/profCheck\", id=v.name .. \"-\" .. id .. \"-prof\" }))\r\n      end\r\n      table.insert(profResults, Pad(10))\r\n      table.insert(profResults, Text({ text=v.name }))\r\n    end\r\n  end\r\n\r\n  table.insert(results, Panel({ HorizontalLayout(profResults, { childForceExpandWidth=false }) }, { minHeight=halfWhenBig(50) }))\r\n  table.insert(results, Text({ minHeight=halfWhenBig(50) }))\r\n\r\n  for v in pairs(powers.powers) do\r\n    local characterWidth = bigSwitch(14, 16)\r\n    local power = powers.powers[v]\r\n    local powerResults = {}\r\n    local maxLength = 1500 / characterWidth\r\n    local remainingLength = maxLength\r\n    for i, w in pairs(power) do\r\n      if(i != 1) then\r\n        table.insert(powerResults, Checkbox({ onClick=self.getGUID() .. \"/roleCheck\", id=v .. \"-\" .. i .. \"-\" .. id .. \"-powers\" }))\r\n        remainingLength = remainingLength - 50 / characterWidth\r\n        w = \" \" .. w\r\n      end\r\n      if(remainingLength < #w) then\r\n        local temp = wrap(powerResults, results, remainingLength, maxLength, w);\r\n        powerResults = temp[1]\r\n        results = temp[2]\r\n        remainingLength = temp[3]\r\n      else\r\n        table.insert(powerResults, Text({text = w, minHeight=halfWhenBig(50), alignment=\"MiddleLeft\"}))\r\n        remainingLength = remainingLength - #w\r\n      end\r\n    end\r\n    table.insert(results, HorizontalLayout(powerResults, {childForceExpandWidth=false}))\r\n    table.insert(results, Text({ minHeight=halfWhenBig(50) }))\r\n  end\r\n\r\n  return VerticalLayout(results)\r\nend\r\n\r\nfunction getUI(size)\r\n  isBig = size == \"big\"\r\n\r\n  local props = {\r\n    childForceExpandHeight=false,\r\n    width=halfWhenBig(1500),\r\n    height=halfWhenBig(2350)\r\n  }\r\n\r\n  if(size == \"big\") then\r\n    props.position=\"0 0 -10\"\r\n  else\r\n    props.position=\"0 -25 -10\"\r\n  end\r\n\r\n  local roleData = Panel()\r\n  if(characterData.roles[data.role + 1] != nil) then\r\n    roleData = Panel({ powers(characterData.roles[data.role + 1].powers, \"role\") }, { minHeight=halfWhenBig(500) })\r\n  end\r\n\r\n  return VerticalLayout(\r\n    {\r\n      Panel({ HorizontalLayout({\r\n        Panel({ characterTitle() }),\r\n        Panel({ traits() })\r\n      }) }, { minHeight=halfWhenBig(100) }),\r\n      Panel({ HorizontalLayout({\r\n        skills(),\r\n        deckList()\r\n      }, { height=0, rectAlignment=\"UpperCenter\" }) }, { minHeight=bigSwitch(500, 200) }),\r\n      Panel({ powers(characterData.powers, \"base\") }, { minHeight=halfWhenBig(500) }),\r\n      Panel({ HorizontalLayout({\r\n        ToggleButton({ minHeight = halfWhenBig(75), text=characterData.roles[1].name, onClick=self.getGUID() .. '/changeRole', id=\"0-role-select\" }),\r\n        ToggleButton({ minHeight = halfWhenBig(75), text=characterData.roles[2].name, onClick=self.getGUID() .. '/changeRole', id=\"1-role-select\" })\r\n      }, { height=0, rectAlignment=\"UpperCenter\" }) }, { minHeight=halfWhenBig(75) }),\r\n      roleData\r\n    },\r\n    props\r\n  )\r\nend\r\n\r\nfunction appendId(contents, id)\r\n  if(contents.attributes.id != nil) then\r\n    contents.attributes.id = contents.attributes.id .. '-' .. id\r\n  end\r\n  if(contents.children) then\r\n    for i,v in pairs(contents.children) do\r\n      contents.children[i] = appendId(v, id)\r\n    end\r\n  end\r\n  return contents\r\nend\r\n\r\nfunction smallSwitch(isSmall, big, small)\r\n  if(isSmall) then\r\n    return small\r\n  else\r\n    return big\r\n  end\r\nend\r\n\r\nfunction build()\r\n  local result = {}\r\n  local isSmall = self.getCustomObject().mesh == smallMesh\r\n\r\n  if(Global.getVar(\"supportsPopout\")) then\r\n    table.insert(result, Button({\r\n      text=\"\\u{261d}\",\r\n      minHeight = 75,\r\n      fontSize=60,\r\n      position=smallSwitch(isSmall, \"-750 1150 -10\", \"-60 0 -10\"),\r\n      width=80,\r\n      height=80,\r\n      onClick=\"popout\"\r\n    }))\r\n    table.insert(result, Button({\r\n      text=smallSwitch(isSmall, \"-\", \"\\u{25A1}\"),\r\n      minHeight = 75,\r\n      fontSize=60,\r\n      position=smallSwitch(isSmall, \"750 1150 -10\", \"60 0 -10\"),\r\n      width=80,\r\n      height=80,\r\n      onClick=\"minimize\"\r\n    }))\r\n  end\r\n\r\n  if(not isSmall) then\r\n    table.insert(result, getUI(\"big\"))\r\n  end\r\n\r\n  self.UI.setXmlTable(result)\r\nend\r\n\r\nfunction minimize()\r\n  local obj = self.getCustomObject();\r\n  local pos = self.getPosition();\r\n  pos.y = pos.y + 2\r\n  if(obj.mesh == bigMesh) then\r\n    obj.mesh = smallMesh\r\n    self.tooltip = true\r\n    pos.z = pos.z + 11.5\r\n    pos.x = pos.x + 7\r\n  else\r\n    obj.mesh = bigMesh\r\n    self.tooltip = false\r\n    pos.z = pos.z - 11.5\r\n    pos.x = pos.x - 7\r\n  end\r\n  self.setCustomObject(obj)\r\n  self.setPosition(pos)\r\n  self.script_state = onSave()\r\n  self.reload()\r\nend\r\n\r\nfunction onLoad(save_state)\r\n  local saveData = JSON.decode(save_state)\r\n  data = saveData.characterData\r\n  characterData = saveData.character\r\n  build()\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction onSave()\r\n  return JSON.encode({\r\n    characterData = data,\r\n    character = characterData\r\n  })\r\nend\r\n\r\nfunction buildWindow(color)\r\n  local contents = getUI(\"small\");\r\n  contents.attributes.id = \"Contents\"\r\n\r\n  return Panel({\r\n    Panel({\r\n      Text({ text=self.getName() .. '/' .. self.getDescription(), class=\"WindowTitle\", offsetXY=\"0 -5\" }),\r\n      Button({\r\n        class=\"topButtons\",\r\n        textColor=\"#000000\",\r\n        text=\"-\",\r\n        offsetXY=\"-40 -10\",\r\n        onClick=\"minimize\",\r\n        id=\"Minimize-\" .. color\r\n      }),\r\n      Button({\r\n          class=\"topButtons\",\r\n          color=\"#990000\",\r\n          textColor=\"#FFFFFF\",\r\n          text=\"X\",\r\n          offsetXY=\"-5 -10\",\r\n          onClick=\"close\",\r\n          id=\"Close-\" .. color\r\n      })\r\n    }, {\r\n      class=\"TopBar\",\r\n      id=\"TopBar-\" .. color\r\n    }),\r\n    appendId(contents, color)\r\n  }, {\r\n    visibility=color,\r\n    fromSheet=self.getGUID(),\r\n    class=\"Window\",\r\n    id=\"Window-\" .. color\r\n  })\r\nend\r\n\r\nfunction rebuildWindows()\r\n  local globalTable = UI.getXmlTable()\r\n\r\n  for i, v in pairs(spawnedWindows) do\r\n    table.insert(globalTable, buildWindow(v))\r\n  end\r\n\r\n  UI.setXmlTable(globalTable, {})\r\nend\r\n\r\nfunction popout(player)\r\n  local globalTable = UI.getXmlTable()\r\n\r\n  local exists = false\r\n\r\n  for i, v in pairs(globalTable) do\r\n    if(v.attributes.visibility == player.color and v.attributes.fromSheet == self.getGUID()) then\r\n      return\r\n    end\r\n  end\r\n\r\n  table.insert(globalTable, buildWindow(player.color))\r\n  UI.setXmlTable(globalTable, {})\r\n  table.insert(spawnedWindows, player.color)\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction setChk(id, v)\r\n  local value = \"false\"\r\n  if(v) then\r\n    value = \"true\"\r\n  end\r\n  self.UI.setAttribute(id, \"isOn\", value)\r\n\r\n  for i, window in pairs(spawnedWindows) do\r\n    UI.setAttribute(id .. '-' .. window, \"isOn\", value)\r\n  end\r\nend\r\n\r\nfunction loadSettings()\r\n  for i, stat in pairs({\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"}) do\r\n    if(data[stat] != nil) then\r\n      for i, v in pairs(data[stat]) do\r\n        setChk(i .. \"-\" .. stat .. \"-skills\", v)\r\n      end\r\n    end\r\n  end\r\n  for i, stat in pairs({\"Armor\", \"Spell\", \"Blessing\", \"Ally\", \"Weapon\", \"Item\"}) do\r\n    if(data.deckList[stat] != nil) then\r\n      for i, v in pairs(data.deckList[stat]) do\r\n        setChk(i + 1 .. \"-\" .. stat .. \"-deckList\", v)\r\n      end\r\n    end\r\n  end\r\n  if(data.handSize != nil) then\r\n    for i, v in pairs(data.handSize) do\r\n      setChk(i + 1 .. \"-base-handSize\", v)\r\n    end\r\n  end\r\n  if(data.roleHandSize != nil) then\r\n    for i, v in pairs(data.roleHandSize) do\r\n      setChk(i + 1 .. \"-role-handSize\", v)\r\n    end\r\n  end\r\n  if(data.powers != nil) then\r\n    for i, v in pairs(data.powers) do\r\n      for j, w in pairs(v) do\r\n        setChk(i + 1 .. \"-\" .. j + 2 .. \"-base-powers\", w)\r\n      end\r\n    end\r\n  end\r\n  if(data.rolePowers != nil) then\r\n    for i, v in pairs(data.rolePowers) do\r\n      for j, w in pairs(v) do\r\n        setChk(i + 1 .. \"-\" .. j + 2 .. \"-role-powers\", w)\r\n      end\r\n    end\r\n  end\r\n  if(data.proficiencies != nil) then\r\n    for i, v in pairs(data.proficiencies) do\r\n      setChk(i .. \"-base-prof\", v)\r\n    end\r\n  end\r\n  if(data.roleProficiencies != nil) then\r\n    for i, v in pairs(data.roleProficiencies) do\r\n      setChk(i .. \"-role-prof\", v)\r\n    end\r\n  end\r\n  if(data.role != nil) then\r\n    setChk(\"0-role-select\", false)\r\n    setChk(\"1-role-select\", false)\r\n    setChk(data.role .. \"-role-select\", true)\r\n  end\r\nend\r\n\r\nfunction handSizeCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local idx = tostring(tonumber(split[1]) - 1)\r\n  local prop = \"handSize\"\r\n  if(split[2] == \"role\") then\r\n    prop = \"roleHandSize\"\r\n  end\r\n  data[prop][idx] = not data[prop][idx]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction skillsCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  data[split[2]][tonumber(split[1])] = not data[split[2]][tonumber(split[1])]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction decklistCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local idx = tostring(tonumber(split[1]) - 1)\r\n  data.deckList[split[2]][idx] = not data.deckList[split[2]][idx]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction roleCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local idx1 = tostring(tonumber(split[1]) - 1)\r\n  local idx2 = tostring(tonumber(split[2]) - 2)\r\n  local prop = \"powers\"\r\n  if(split[3] == \"role\") then\r\n    prop = \"rolePowers\"\r\n  end\r\n  data[prop][idx1][idx2] = not data[prop][idx1][idx2]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction profCheck(player, value, id)\r\n  local split = split(id, \"-\")\r\n  local prop = \"proficiencies\"\r\n  if(split[2] == \"role\") then\r\n    prop = \"roleProficiencies\"\r\n  end\r\n  data[prop][split[1]] = not data[prop][split[1]]\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\nfunction changeRole(player, value, id)\r\n  local split = split(id, \"-\")\r\n  data.role = tonumber(split[1])\r\n  data.roleHandSize = {}\r\n  data.roleProficiencies = {}\r\n  data.rolePowers = {}\r\n  build()\r\n  rebuildWindows()\r\n  setTimeout(loadSettings, nil, 10)\r\nend\r\n\r\n--[[\r\n  This is a library of useful lua functions for table top simulator\r\n\r\n  To use this library you will need to have the atom editor installed with the\r\n  TTS plugin. Once that is complete open Settings, Click Packages, Under\r\n  tabletopsimulator-lua click settings, check the \"Experimental: insert other\r\n  files specified in source code\", and set the path for the includes (I used\r\n  Documents/My Games/Tabletop Simulator. You will need to go there in windows\r\n  explorer and copy the path over). Finally you will need to save this file in\r\n  that folder as \"Little Lua Library.ttslua\". Once all that is complete you can\r\n  drop \"#include Little Lua Library\" anywhere in your file (recommended: at the\r\n  top or bottom) to get access to these functions\r\n\r\n  Note: This will need to overwrite the update method. If you need this\r\n  functionality put your code in a baseUpdate method instead\r\n]]\r\n\r\n--[[\r\n  This will trim any pattern from the front/end of a string. Defaults to\r\n  trimming whitespace\r\n]]\r\nfunction trim(s, patternToTrim)\r\n  local trimPattern = patternToTrim or \"%s\"\r\n  return s:match(\"^\" .. trimPattern .. \"*(.*)$\"):match(\"^(.*)\" .. trimPattern .. \"*$\")\r\nend\r\n\r\n--[[\r\n  This splits a string using a delimeter. It will also trim the items by default\r\n]]\r\nfunction split(value, delim, dontTrim)\r\n  local realDelim = delim or ','\r\n  local result = {}\r\n  local i = 1\r\n  local currentValue = value or ''\r\n\r\n  local idx = currentValue:find(realDelim)\r\n\r\n  while idx do\r\n    local s = currentValue:sub(1, idx - 1)\r\n\t\tif dontTrim then\r\n      result[i] = s\r\n    else\r\n      result[i] = trim(s)\r\n    end\r\n    i = i + 1\r\n\r\n    currentValue = currentValue:sub(idx + 1)\r\n    idx = currentValue:find(realDelim)\r\n  end\r\n\r\n\tif dontTrim then\r\n    result[i] = currentValue\r\n  else\r\n    result[i] = trim(currentValue)\r\n  end\r\n\r\n  return result\r\nend\r\n\r\n--[[\r\n  This will check to see if a list has an item\r\n]]\r\nfunction hasItem(value, target, delim, dontTrim)\r\n\tlocal items = split(value, delim, dontTrim)\r\n\r\n\tfor i, s in pairs(items) do\r\n\t\tif(s == target) then\r\n\t\t\treturn true\r\n\t\tend\r\n\tend\r\n\r\n\treturn false\r\nend\r\n\r\n--[[\r\n  This is a noop method for use in label buttons\r\n]]\r\nfunction noop() end\r\n\r\n--[[\r\n  This will print the position of an object, useful for figuring out initial\r\n  positions of things while building scripts\r\n]]\r\nfunction printPosition(label, object)\r\n  local position = object.getPosition()\r\n  print(label .. ' ' .. position.x .. ',' .. position.y .. ',' .. position.z)\r\nend\r\n\r\nluaLibraryTimeoutQueue = {}\r\nluaLibraryTimeoutStart = 1\r\nluaLibraryTimeoutNext = 1\r\n\r\n--[[\r\n  This acts similar to the setTimeout function in js, the primary difference is\r\n  that this one will run your method so many frames later instead of being\r\n  time based\r\n]]\r\nfunction setTimeout(fn, params, frameCount)\r\n  luaLibraryTimeoutQueue[luaLibraryTimeoutNext] = {\r\n    fn = fn,\r\n    params = params,\r\n    frameCount = frameCount\r\n  }\r\n  luaLibraryTimeoutNext = luaLibraryTimeoutNext + 1\r\nend\r\n\r\nfunction update()\r\n  if luaLibraryTimeoutQueue[luaLibraryTimeoutStart] then\r\n    for i=luaLibraryTimeoutStart,(luaLibraryTimeoutNext - 1) do\r\n      if luaLibraryTimeoutQueue[i] then\r\n        luaLibraryTimeoutQueue[i].frameCount = luaLibraryTimeoutQueue[i].frameCount - 1\r\n\r\n        if luaLibraryTimeoutQueue[i].frameCount <= 0 then\r\n          local fn = luaLibraryTimeoutQueue[i].fn\r\n        local params = luaLibraryTimeoutQueue[i].params\r\n          luaLibraryTimeoutQueue[i] = nil\r\n          fn(params)\r\n        end\r\n      end\r\n\r\n      if not luaLibraryTimeoutQueue[i] and luaLibraryTimeoutStart == i then\r\n        luaLibraryTimeoutStart = luaLibraryTimeoutStart + 1\r\n      end\r\n    end\r\n  end\r\n\r\n  if baseUpdate then\r\n    baseUpdate()\r\n  end\r\nend\r\n\n----#include NewestCharacterSheet\n          ]========],\r\n          LuaScriptState = JSON.encode({\r\n            character = data.character,\r\n            characterData = data.characterData\r\n          })\r\n        })\r\n\r\n        if(data.character.image) then\r\n          table.insert(results, {\r\n            Autoraise = true,\r\n            ColorDiffuse = {\r\n              r = 1,\r\n              g = 1,\r\n              b = 1\r\n            },\r\n            CustomImage = {\r\n              ImageScalar = 1,\r\n              ImageURL = data.character.image,\r\n              ImageSecondaryURL = data.character.image,\r\n              WidthScale = 0\r\n            },\r\n            Description = data.characterDeck,\r\n            GMNotes = \"\",\r\n            Grid = false,\r\n            GridProjection = false,\r\n            Guid = \"deadbf\",\r\n            Hands = false,\r\n            HideWhenFaceDown = false,\r\n            IgnoreFoW = false,\r\n            Locked = false,\r\n            Name = \"Figurine_Custom\",\r\n            Nickname = data.characterName,\r\n            Snap = false,\r\n            Sticky = true,\r\n            Tooltip = false,\r\n            Transform = {\r\n              posX = 1,\r\n              posY = 1,\r\n              posZ = 1,\r\n              rotX = 0,\r\n              rotY = 0,\r\n              rotZ = 0,\r\n              scaleX = 1,\r\n              scaleY = 1,\r\n              scaleZ = 1,\r\n            },\r\n            XmlUI = \"\",\r\n          })\r\n        end\r\n\r\n        spawnObjectJSON({\r\n          json = JSON.encode({\r\n            Name = \"Bag\",\r\n            Transform = {\r\n              posX = 1,\r\n              posY = 1,\r\n              posZ = 1,\r\n              rotX = 0,\r\n              rotY = 0,\r\n              rotZ = 0,\r\n              scaleX = 1,\r\n              scaleY = 1,\r\n              scaleZ = 1,\r\n            },\r\n            Nickname = \"\",\r\n            Description = \"\",\r\n            GMNotes = \"\",\r\n            ColorDiffuse = {\r\n              r = 0,\r\n              g = 0,\r\n              b = 0\r\n            },\r\n            Locked = false,\r\n            Grid = true,\r\n            Snap = true,\r\n            IgnoreFoW = false,\r\n            Autoraise = true,\r\n            Sticky = true,\r\n            Tooltip = true,\r\n            GridProjection = false,\r\n            HideWhenFaceDown = false,\r\n            Hands = false,\r\n            MaterialIndex = -1,\r\n            MeshIndex = -1,\r\n            XmlUI = \"\",\r\n            LuaScript = \"\",\r\n            LuaScriptState = \"\",\r\n            ContainedObjects = results,\r\n            GUID = \"deadbf\"\r\n          }),\r\n          position = pos,\r\n          rotation = {0, 0, 0},\r\n          scale = {1, 1, 1},\r\n          sound = false,\r\n          snap_to_grid = false\r\n        })\r\n        running = false\r\n      end\r\n    end\r\n  end\r\nend\r\n\r\n----#include toCards\nfunction toCards(boxObj)\r\n  local images = {}\r\n  local cards = {}\r\n\r\n  for image in pairs(boxObj.DeckImages) do\r\n    images[image] = Decker.Asset(\r\n      boxObj.DeckImages[image].url,\r\n      \"http://cloud-3.steamusercontent.com/ugc/1021699804504901512/B0CCF926C6D9A53A30E1713DB7AD8738859E3E86/\",\r\n      {\r\n          width = boxObj.DeckImages[image].width,\r\n          height = boxObj.DeckImages[image].height\r\n      })\r\n  end\r\n\r\n  for deck in pairs(boxObj.Decks) do\r\n    local deckObj = boxObj.Decks[deck];\r\n    cards[deck] = {}\r\n    for card in pairs(deckObj) do\r\n      local cardObj = deckObj[card]\r\n      cards[deck][card] = Decker.Card(images[cardObj.deck], cardObj.x + 1, cardObj.y + 1, { name = card, desc = cardObj.Description })\r\n    end\r\n  end\r\n\r\n  return cards\r\nend\r\n\r\n----#include Decker\ndo\n    Decker = {}\n\n    -- provide unique ID starting from 20 for present decks\n    local nextID\n    do\n        local _nextID = 20\n        nextID = function()\n            _nextID = _nextID + 1\n            return tostring(_nextID)\n        end\n    end\n\n    -- Asset signature (equality comparison)\n    local function assetSignature(assetData)\n        return table.concat({\n            assetData.FaceURL,\n            assetData.BackURL,\n            assetData.NumWidth,\n            assetData.NumHeight,\n            assetData.BackIsHidden and 'hb' or '',\n            assetData.UniqueBack and 'ub' or ''\n        })\n    end\n    -- Asset ID storage to avoid new ones for identical assets\n    local idLookup = {}\n    local function assetID(assetData)\n        local sig = assetSignature(assetData)\n        local key = idLookup[sig]\n        if not key then\n            key = nextID()\n            idLookup[sig] = key\n        end\n        return key\n    end\n\n    local assetMeta = {\n        deck = function(self, cardNum, options)\n            return Decker.AssetDeck(self, cardNum, options)\n        end\n    }\n    assetMeta = {__index = assetMeta}\n\n    -- Create a new CustomDeck asset\n    function Decker.Asset(face, back, options)\n        local asset = {}\n        options = options or {}\n        asset.data = {\n            FaceURL = face or error('Decker.Asset: faceImg link required'),\n            BackURL = back or error('Decker.Asset: backImg link required'),\n            NumWidth = options.width or 1,\n            NumHeight = options.height or 1,\n            BackIsHidden = options.hiddenBack or false,\n            UniqueBack = options.uniqueBack or false\n        }\n        -- Reuse ID if asset existing\n        asset.id = assetID(asset.data)\n        return setmetatable(asset, assetMeta)\n    end\n    -- Pull a Decker.Asset from card JSONs CustomDeck entry\n    local function assetFromData(assetData)\n        return setmetatable({data = assetData, id = assetID(assetData)}, assetMeta)\n    end\n\n    -- Create a base for JSON objects\n    function Decker.BaseObject()\n        return {\n            Name = 'Base',\n            Transform = {\n                posX = 0, posY = 5, posZ = 0,\n                rotX = 0, rotY = 0, rotZ = 0,\n                scaleX = 1, scaleY = 1, scaleZ = 1\n            },\n            Nickname = '',\n            Description = '',\n            ColorDiffuse = { r = 1, g = 1, b = 1 },\n            Locked = false,\n            Grid = true,\n            Snap = true,\n            Autoraise = true,\n            Sticky = true,\n            Tooltip = true,\n            GridProjection = false,\n            Hands = false,\n            XmlUI = '',\n            LuaScript = '',\n            LuaScriptState = '',\n            GUID = 'deadbf'\n        }\n    end\n    -- Typical paramters map with defaults\n    local commonMap = {\n        name   = {field = 'Nickname',    default = ''},\n        desc   = {field = 'Description', default = ''},\n        script = {field = 'LuaScript',   default = ''},\n        xmlui  = {field = 'XmlUI',       default = ''},\n        scriptState = {field = 'LuaScriptState', default = ''},\n        locked  = {field = 'Locked',  default = false},\n        tooltip = {field = 'Tooltip', default = true},\n        guid    = {field = 'GUID',    default = 'deadbf'},\n    }\n    -- Apply some basic parameters on base JSON object\n    function Decker.SetCommonOptions(obj, options)\n        options = options or {}\n        for k,v in pairs(commonMap) do\n            -- can't use and/or logic cause of boolean fields\n            if options[k] ~= nil then\n                obj[v.field] = options[k]\n            else\n                obj[v.field] = v.default\n            end\n        end\n        -- passthrough unrecognized keys\n        for k,v in pairs(options) do\n            if not commonMap[k] then\n                obj[k] = v\n            end\n        end\n    end\n    -- default spawnObjectJSON params since it doesn't like blank fields\n    local function defaultParams(params, json)\n        params = params or {}\n        params.json = json\n        params.position = params.position or {0, 5, 0}\n        params.rotation = params.rotation or {0, 0, 0}\n        params.scale = params.scale or {1, 1, 1}\n        if params.sound == nil then\n            params.sound = true\n        end\n        return params\n    end\n\n    -- For copy method\n    local deepcopy\n    deepcopy = function(t)\n        local copy = {}\n        for k,v in pairs(t) do\n           if type(v) == 'table' then\n               copy[k] = deepcopy(v)\n           else\n               copy[k] = v\n           end\n        end\n        return copy\n    end\n    -- meta for all Decker derived objects\n    local commonMeta = {\n        -- return object JSON string, used cached if present\n        _cache = function(self)\n            if not self.json then\n                self.json = JSON.encode(self.data)\n            end\n            return self.json\n        end,\n        -- invalidate JSON string cache\n        _recache = function(self)\n            self.json = nil\n            return self\n        end,\n        spawn = function(self, params)\n            params = defaultParams(params, self:_cache())\n            return spawnObjectJSON(params)\n        end,\n        copy = function(self)\n            return setmetatable(deepcopy(self), getmetatable(self))\n        end,\n        setCommon = function(self, options)\n            Decker.SetCommonOptions(self.data, options)\n            return self\n        end,\n    }\n    -- apply common part on a specific metatable\n    local function customMeta(mt)\n        for k,v in pairs(commonMeta) do\n            mt[k] = v\n        end\n        mt.__index = mt\n        return mt\n    end\n\n    -- DeckerCard metatable\n    local cardMeta = {\n        setAsset = function(self, asset)\n            local cardIndex = self.data.CardID:sub(-2, -1)\n            self.data.CardID = asset.id .. cardIndex\n            self.data.CustomDeck = {[asset.id] = asset.data}\n            return self:_recache()\n        end,\n        getAsset = function(self)\n            local deckID = next(self.data.CustomDeck)\n            return assetFromData(self.data.CustomDeck[deckID])\n        end,\n        -- reset deck ID to a consistent value script-wise\n        _recheckDeckID = function(self)\n            local oldID = next(self.data.CustomDeck)\n            local correctID = assetID(self.data.CustomDeck[oldID])\n            if oldID ~= correctID then\n                local cardIndex = self.data.CardID:sub(-2, -1)\n                self.data.CardID = correctID .. cardIndex\n                self.data.CustomDeck[correctID] = self.data.CustomDeck[oldID]\n                self.data.CustomDeck[oldID] = nil\n            end\n            return self\n        end\n    }\n    cardMeta = customMeta(cardMeta)\n    -- Create a DeckerCard from an asset\n    function Decker.Card(asset, row, col, options)\n        row, col = row or 1, col or 1\n        options = options or {}\n        local card = Decker.BaseObject()\n        card.Name = 'Card'\n        -- optional custom fields\n        Decker.SetCommonOptions(card, options)\n        if options.sideways ~= nil then\n            card.SidewaysCard = options.sideways\n            -- FIXME passthrough set that field, find some more elegant solution\n            card.sideways = nil\n        end\n        -- CardID string is parent deck ID concat with its 0-based index (always two digits)\n        local num = (row-1)*asset.data.NumWidth + col - 1\n        num = string.format('%02d', num)\n        card.CardID = asset.id .. num\n        -- just the parent asset reference needed\n        card.CustomDeck = {[asset.id] = asset.data}\n\n        local obj = setmetatable({data = card}, cardMeta)\n        obj:_cache()\n        return obj\n    end\n\n\n    -- DeckerDeck meta\n    local deckMeta = {\n        count = function(self)\n            return #self.data.DeckIDs\n        end,\n        -- Transform index into positive\n        index = function(self, ind)\n            if ind < 0 then\n                return self:count() + ind + 1\n            else\n                return ind\n            end\n        end,\n        swap = function(self, i1, i2)\n            local ri1, ri2 = self:index(i1), self:index(i2)\n            assert(ri1 > 0 and ri1 <= self:count(), 'DeckObj.rearrange: index ' .. i1 .. ' out of bounds')\n            assert(ri2 > 0 and ri2 <= self:count(), 'DeckObj.rearrange: index ' .. i2 .. ' out of bounds')\n            self.data.DeckIDs[ri1], self.data.DeckIDs[ri2] = self.data.DeckIDs[ri2], self.data.DeckIDs[ri1]\n            local co = self.data.ContainedObjects\n            co[ri1], co[ri2] = co[ri2], co[ri1]\n            return self:_recache()\n        end,\n        -- rebuild self.data.CustomDeck based on contained cards\n        _rescanDeckIDs = function(self, id)\n            local cardIDs = {}\n            for k,card in ipairs(self.data.ContainedObjects) do\n                local cardID = next(card.CustomDeck)\n                if not cardIDs[cardID] then\n                    cardIDs[cardID] = card.CustomDeck[cardID]\n                end\n            end\n            -- eeh, GC gotta earn its keep as well\n            -- FIXME if someone does shitton of removals, may cause performance issues?\n            self.data.CustomDeck = cardIDs\n        end,\n        remove = function(self, ind, skipRescan)\n            local rind = self:index(ind)\n            assert(rind > 0 and rind <= self:count(), 'DeckObj.remove: index ' .. ind .. ' out of bounds')\n            local card = self.data.ContainedObjects[rind]\n            table.remove(self.data.DeckIDs, rind)\n            table.remove(self.data.ContainedObjects, rind)\n            if not skipRescan then\n                self:_rescanDeckIDs(next(card.CustomDeck))\n            end\n            return self:_recache()\n        end,\n        removeMany = function(self, ...)\n            local indices = {...}\n            table.sort(indices, function(e1,e2) return self:index(e1) > self:index(e2) end)\n            for _,ind in ipairs(indices) do\n                self:remove(ind, true)\n            end\n            self:_rescanDeckIDs()\n            return self:_recache()\n        end,\n        insert = function(self, card, ind)\n            ind = ind or (self:count() + 1)\n            local rind = self:index(ind)\n            assert(rind > 0 and rind <= (self:count()+1), 'DeckObj.insert: index ' .. ind .. ' out of bounds')\n            table.insert(self.data.DeckIDs, rind, card.data.CardID)\n            table.insert(self.data.ContainedObjects, rind, card.data)\n            local id = next(card.data.CustomDeck)\n            if not self.data.CustomDeck[id] then\n                self.data.CustomDeck[id] = card.data.CustomDeck[id]\n            end\n            return self:_recache()\n        end,\n        reverse = function(self)\n            local s,e = 1, self:count()\n            while s < e do\n                self:swap(s, e)\n                s = s+1\n                e = e-1\n            end\n            return self:_recache()\n        end,\n        cardAt = function(self, ind)\n            local rind = self:index(ind)\n            assert(rind > 0 and rind <= (self:count()+1), 'DeckObj.insert: index ' .. ind .. ' out of bounds')\n            local card = setmetatable({data = deepcopy(self.data.ContainedObjects[rind])}, cardMeta)\n            card:_cache()\n            return card\n        end,\n        switchAssets = function(self, replaceTable)\n            -- destructure replace table into\n            -- [ID_to_replace] -> [ID_to_replace_with]\n            -- [new_asset_ID] -> [new_asset_data]\n            local idReplace = {}\n            local assets = {}\n            for oldAsset, newAsset in pairs(replaceTable) do\n                assets[newAsset.id] = newAsset.data\n                idReplace[oldAsset.id] = newAsset.id\n            end\n            -- update deckIDs\n            for k,cardID in ipairs(self.data.DeckIDs) do\n                local deckID, cardInd = cardID:sub(1, -3), cardID:sub(-2, -1)\n                if idReplace[deckID] then\n                    self.data.DeckIDs[k] = idReplace[deckID] .. cardInd\n                end\n            end\n            -- update CustomDeck data - nil replaced\n            for replacedID in pairs(idReplace) do\n                if self.data.CustomDeck[replacedID] then\n                    self.data.CustomDeck[replacedID] = nil\n                end\n            end\n            -- update CustomDeck data - add replacing\n            for _,replacingID in pairs(idReplace) do\n                self.data.CustomDeck[replacingID] = assets[replacingID]\n            end\n            -- update card data\n            for k,cardData in ipairs(self.data.ContainedObjects) do\n                local deckID = next(cardData.CustomDeck)\n                if idReplace[deckID] then\n                    cardData.CustomDeck[deckID] = nil\n                    cardData.CustomDeck[idReplace[deckID]] = assets[idReplace[deckID]]\n                end\n            end\n            return self:_recache()\n        end,\n        getAssets = function(self)\n            local assets = {}\n            for id,assetData in pairs(self.data.CustomDeck) do\n                assets[#assets+1] = assetFromData(assetData)\n            end\n            return assets\n        end\n    }\n    deckMeta = customMeta(deckMeta)\n    -- Create DeckerDeck object from DeckerCards\n    function Decker.Deck(cards, options)\n        assert(#cards > 1, 'Trying to create a Decker.deck with less than 2 cards')\n        local deck = Decker.BaseObject()\n        deck.Name = 'Deck'\n        Decker.SetCommonOptions(deck, options)\n        deck.DeckIDs = {}\n        deck.CustomDeck = {}\n        deck.ContainedObjects = {}\n        for _,card in ipairs(cards) do\n            deck.DeckIDs[#deck.DeckIDs+1] = card.data.CardID\n            local id = next(card.data.CustomDeck)\n            if not deck.CustomDeck[id] then\n                deck.CustomDeck[id] = card.data.CustomDeck[id]\n            end\n            deck.ContainedObjects[#deck.ContainedObjects+1] = card.data\n        end\n\n        local obj = setmetatable({data = deck}, deckMeta)\n        obj:_cache()\n        return obj\n    end\n    -- Create DeckerDeck from an asset using X cards on its sheet\n    function Decker.AssetDeck(asset, cardNum, options)\n        cardNum = cardNum or asset.data.NumWidth * asset.data.NumHeight\n        local row, col, width = 1, 1, asset.data.NumWidth\n        local cards = {}\n        for k=1,cardNum do\n            cards[#cards+1] = Decker.Card(asset, row, col)\n            col = col+1\n            if col > width then\n                row, col = row+1, 1\n            end\n        end\n        return Decker.Deck(cards, options)\n    end\nend\n\n----#include Decker\n\n----#include toCards\n\n----#include SpawnDeckFromSite",
            "LuaScriptState": "{\"cardFeat\":\"False\",\"characterName\":\"\",\"class\":\"\",\"coordinatorOp\":\"\",\"date\":\"\",\"eventNumber\":\"\",\"notes\":\"s\",\"playerName\":\"\",\"playNumber\":\"\",\"remaining\":\"\",\"reported\":\"False\",\"reward\":\"False\",\"rewardText\":\"\",\"scenario\":\"\",\"skillFeat\":\"False\",\"tier\":\"\",\"upgrade\":\"\",\"upgrade2\":\"\",\"upgrade3\":\"\",\"used\":\"\",\"xp\":\"\"}",
            "XmlUI": "<Defaults>\r\n  <Button fontSize=\"50\"/>\r\n  <Text fontSize=\"80\"/>\r\n  <InputField fontSize=\"60\" placeholder=\" \" onValueChanged=\"saveValue\" />\r\n  <Dropdown fontSize=\"16\"/>\r\n  <VerticalLayout />\r\n  <HorizontalLayout/>\r\n  <ToggleButton minWidth=\"90\" onValueChanged=\"saveValue\" />\r\n</Defaults>\r\n\r\n<Panel id=\"pasteView\" active=\"false\" height=\"1900\" width=\"4650\" position=\"0 0 -11\" scale=\"0.1 0.1\" spacing=\"5\" rotation=\"0 0 180\">\r\n  <Button position=\"-2280 905 0\" width=\"120\" height=\"120\" onClick=\"togglePaste\" fontSize=\"100\">↶</Button>\r\n  <InputField lineType=\"MultiLineNewLine\" readOnly=\"true\" id=\"pasteText\" width=\"4440\" height=\"1700\" position=\"0 0 0\"/>\r\n</Panel>\r\n\r\n<Panel id=\"pasteView\" active=\"false\" height=\"1900\" width=\"4650\" position=\"0 0 -11\" scale=\"0.1 0.1\" spacing=\"5\" rotation=\"0 0 180\">\r\n  <Button position=\"-2280 905 0\" width=\"120\" height=\"120\" onClick=\"togglePaste\" fontSize=\"100\">↶</Button>\r\n  <InputField lineType=\"MultiLineNewLine\" readOnly=\"true\" id=\"pasteText\" width=\"4440\" height=\"1700\" position=\"0 0 0\"/>\r\n</Panel>\r\n\r\n<Panel id=\"editView\" height=\"1900\" width=\"4650\" position=\"0 0 -11\" scale=\"0.1 0.1\" spacing=\"5\" rotation=\"0 0 180\">\r\n  <Button position=\"-2280 905 0\" width=\"120\" height=\"120\" onClick=\"togglePaste\"><Image image=\"Paste\" width=\"78\" height=\"96\" /></Button>\r\n  <Image image=\"Logo\" width=\"1399\" height=\"600\" position=\"-1405 527 0\" />\r\n  <InputField id=\"playerName\" fontSize=\"100\" width=\"900\" height=\"150\" position=\"200 700 0\" placeholder=\"Player Name\" />\r\n  <Text fontSize=\"80\" position=\"850 700 0\">A.K.A</Text>\r\n  <InputField id=\"characterName\" fontSize=\"100\" width=\"1200\" height=\"150\" position=\"1600 700 0\" placeholder=\"Character Name\" />\r\n\r\n\r\n  <InputField id=\"playNumber\" fontSize=\"100\" width=\"900\" height=\"150\" position=\"200 400 0\" placeholder=\"Organized Play #\" />\r\n  <InputField id=\"class\" fontSize=\"100\" width=\"1200\" height=\"150\" position=\"1600 400 0\" placeholder=\"Character Class\" />\r\n  <Button position=\"-350 400 0\" width=\"120\" height=\"120\" onClick=\"SpawnDeck\"><Image image=\"Spawn\" width=\"96\" height=\"96\" /></Button>\r\n\r\n  <HorizontalLayout width=\"4440\" height=\"1050\" position=\"0 -320 0\" childForceExpandWidth=\"0\">\r\n    <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n    <VerticalLayout childForceExpandHeight=\"0\" flexibleWidth=\"1\">\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n      <Panel color=\"#AAAAAA\" minHeight=\"90\"><HorizontalLayout childForceExpandWidth=\"0\" spacing=\"25\">\r\n        <Panel minWidth=\"2050\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Scenario:</Text>\r\n            <InputField id=\"scenario\" flexibleWidth=\"1\" />\r\n            <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <HorizontalLayout flexibleWidth=\"1\" spacing=\"25\">\r\n          <Panel><HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Tier:</Text>\r\n            <InputField id=\"tier\" flexibleWidth=\"1\" />\r\n            <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout></Panel>\r\n          <Panel><HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>XP:</Text>\r\n            <InputField id=\"xp\" flexibleWidth=\"1\" />\r\n            <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout></Panel>\r\n          <Panel><HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Date:</Text>\r\n            <InputField id=\"date\" flexibleWidth=\"1\" />\r\n          </HorizontalLayout></Panel>\r\n        </HorizontalLayout>\r\n      </HorizontalLayout></Panel>\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n      <Panel minHeight=\"90\"><HorizontalLayout childForceExpandWidth=\"0\" spacing=\"25\">\r\n        <Panel minWidth=\"1500\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Event #:</Text>\r\n            <InputField id=\"eventNumber\" flexibleWidth=\"1\" />\r\n            <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel minWidth=\"2200\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Coordinator OP #:</Text>\r\n            <InputField id=\"coordinatorOp\" flexibleWidth=\"1\" />\r\n            <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel flexibleWidth=\"1\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Reported?</Text>\r\n            <Text flexibleWidth=\"1\" />\r\n            <ToggleButton id=\"reported\" minWidth=\"90\" />\r\n            <Text flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n      </HorizontalLayout></Panel>\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n      <Panel minHeight=\"380\">\r\n        <VerticalLayout spacing=\"5\" childForceExpandHeight=\"0\">\r\n          <HorizontalLayout minHeight=\"90\" childForceExpandWidth=\"0\">\r\n            <Text>Reward: </Text>\r\n            <ToggleButton id=\"reward\" />\r\n          </HorizontalLayout>\r\n          <InputField lineType=\"MultiLineNewLine\" id=\"rewardText\" minHeight=\"180\" />\r\n          <HorizontalLayout minHeight=\"90\" childForceExpandWidth=\"0\">\r\n            <ToggleButton id=\"replayed\" />\r\n            <Text>None - Replayed Scenario</Text>\r\n            <Text flexibleWidth=\"1\" />\r\n            <ToggleButton id=\"failed\" />\r\n            <Text>None - Failed Scenario</Text>\r\n            <Text flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </VerticalLayout>\r\n      </Panel>\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n      <Panel minHeight=\"90\"><HorizontalLayout spacing=\"25\">\r\n        <Panel minWidth=\"200\"><Text>Hero Point Spend:</Text></Panel>\r\n        <Panel>\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <ToggleButton id=\"skillFeat\" />\r\n            <Text>Skill Feat</Text>\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel>\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <ToggleButton id=\"powerFeat\" />\r\n            <Text>Power Feat</Text>\r\n            <Text flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel>\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <ToggleButton id=\"cardFeat\" />\r\n            <Text>Card Feat</Text>\r\n            <Text flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel minWidth=\"200\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <ToggleButton id=\"noSpend\" />\r\n            <Text>Did Not Spend</Text>\r\n            <Text flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel>\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Used: </Text>\r\n            <InputField id=\"used\" flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel minWidth=\"200\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Remaining: </Text>\r\n            <InputField id=\"remaining\" flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n      </HorizontalLayout></Panel>\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n      <Panel minHeight=\"90\"><HorizontalLayout spacing=\"25\">\r\n        <Panel minWidth=\"200\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Deck Upgrade:</Text>\r\n            <InputField id=\"upgrade\" flexibleWidth=\"1\" />\r\n              <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel>\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Bonus Deck Upgrade:</Text>\r\n            <InputField id=\"upgrade2\" flexibleWidth=\"1\" />\r\n              <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n        <Panel>\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Bonus Deck Upgrade:</Text>\r\n            <InputField id=\"upgrade3\" flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n      </HorizontalLayout></Panel>\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n      <Panel flexibleHeight=\"1\"><HorizontalLayout spacing=\"25\">\r\n        <Panel minWidth=\"200\">\r\n          <HorizontalLayout childForceExpandWidth=\"0\">\r\n            <Text>Notes:</Text>\r\n            <InputField lineType=\"MultiLineNewLine\"  id=\"notes\" flexibleWidth=\"1\" />\r\n          </HorizontalLayout>\r\n        </Panel>\r\n      </HorizontalLayout></Panel>\r\n      <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n    </VerticalLayout>\r\n    <Image minHeight=\"8\" minWidth=\"8\" color=\"#000000\" />\r\n  </HorizontalLayout>\r\n</Panel>",
            "CustomUIAssets": [
                {
                    "Name": "Logo",
                    "URL": "https://static2.paizo.com/image/content/PathfinderSociety/PFSACG-LandingLogo.png"
                },
                {
                    "Name": "Paste",
                    "URL": "http://cloud-3.steamusercontent.com/ugc/1021699268804127014/CFF926A940ACCC6B0A2632E12DE5AF296471189C/"
                },
                {
                    "Name": "Spawn",
                    "URL": "http://cloud-3.steamusercontent.com/ugc/1021699521565637250/93B89C218CCA59E15193BFFC6297389F57F54AD7/"
                }
            ],
            "GUID": "05cce1"
        }
    ],
    "LuaScript": "",
    "LuaScriptState": "",
    "XmlUI": "",
    "VersionNumber": "v12.4.3"
}